# Import necessary libraries
import streamlit as st
import pandas as pd
import json
import os
from datetime import date, datetime
from collections import defaultdict
import uuid
import time
from datetime import timedelta
import csv
from io import StringIO
import base64

# --- Configuration and Data Storage ---
DATA_FILE = 'center_data.json'
MEDIA_FOLDER = 'media'
st.set_page_config(layout="wide", page_title="–î–µ—Ç—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

# User authentication data (for a small, local app)
USERS = {
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)
    "admin": {
        "password": "admin123", 
        "role": "admin",
        "teacher_id": None
    },
    
    # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)
    "teacher": {
        "password": "teacher123",
        "role": "reception",
        "teacher_id": None
    },
    "kristina": {
        "password": "kristina123",
        "role": "teacher",
        "teacher_id": "0138ade6-d53a-4cf1-a991-d6fe190dd78c"  # –§–∏–ª–∏–ø–ø–æ–≤–∞ –ö—Ä–∏—Å—Ç–∏–Ω–∞ –ï–≤–≥–µ–Ω—å–µ–≤–Ω–∞
    },
    "maria": {
        "password": "maria123",
        "role": "teacher",
        "teacher_id": "c13d7275-0cf0-46a7-b553-ed49eb7f3c18"  # –°–∏–¥–æ—Ä–æ–≤–∞ –ú–∞—Ä–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    },
    "lusine": {
        "password": "lusine123",
        "role": "teacher",
        "teacher_id": "af26a45e-2bfb-48f2-987c-94bf08da0a24"  # –õ—É—Å–∏–Ω–µ –ê—Ä–∞–º–æ–≤–Ω–∞ –ü–µ—Ç—Ä–æ—Å—è–Ω
    },
    "oksana": {
        "password": "oksana123",
        "role": "teacher",
        "teacher_id": "4e75e60a-c7b6-404f-9c55-5b7cf4982c8d"  # –û–∫—Å–∞–Ω–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞
    },
    "ali": {
        "password": "ali123",
        "role": "teacher",
        "teacher_id": "e9f70379-02f6-42d7-a4b4-31ce5bf4a840"  # –ê–ª–∏ –ú–∞–≥–æ–º–µ–¥–æ–≤–∏—á –ö–∞—Ä–∏–º–æ–≤
    },
    "natalia_v": {
        "password": "natalia123",
        "role": "teacher",
        "teacher_id": "17ecccaf-5300-4238-8728-21cbb78db67b"  # –ì–µ–ª—É–Ω–æ–≤–∞ –ù–∞—Ç–∞–ª—å—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞
    },
    "natalia_s": {
        "password": "natalias123",
        "role": "teacher",
        "teacher_id": "47454a8d-fa51-4f64-aa30-79a5f1d1a476"  # –ù–∞—Ç–∞–ª—å—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞
    },
    "elena": {
        "password": "elena123",
        "role": "teacher",
        "teacher_id": "92c00fb4-80a8-4d26-af5a-f9bb58218fea"  # –ï–ª–µ–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞ –ö–æ–≤–∞–ª–µ–≤–∞
    },
    
    # –†–µ—Å–µ–ø—à–µ–Ω (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–æ–ª—å)
    "reception": {
        "password": "reception123",
        "role": "reception",
        "teacher_id": None
    }
}

# Check if the data file exists, if not, create a new one with an empty structure
if not os.path.exists(DATA_FILE):
    initial_data = {
        'news': [],
        'directions': [],
        'students': [],
        'teachers': [],
        'parents': [],
        'payments': [],
        'schedule': [],
        'recurring_lessons': [],
        'materials': [],
        'attendance': {},
        'kanban_tasks': {
            'ToDo': [],
            'InProgress': [],
            'Done': []
        },
        'settings': {
            'trial_cost': 500,
            'single_cost_multiplier': 1.5
        }
    }
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(initial_data, f, ensure_ascii=False, indent=4)
        
if not os.path.exists(MEDIA_FOLDER):
    os.makedirs(MEDIA_FOLDER)
    for subfolder in ["images", "documents", "videos", "general"]:
        os.makedirs(os.path.join(MEDIA_FOLDER, subfolder))

# Load data from JSON file
def load_data():
    """Load data from the JSON file."""
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# Save data to JSON file
def save_data(data):
    """Save data to the JSON file."""
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# Initialize session state for the app
if 'data' not in st.session_state:
    st.session_state.data = load_data()
    required_keys = {
        'news': [],
        'directions': [],
        'students': [],
        'teachers': [],
        'parents': [],
        'payments': [],
        'schedule': [],
        'recurring_lessons': [],
        'materials': [],
        'kanban_tasks': {'ToDo': [], 'InProgress': [], 'Done': []},
        'attendance': {},
        'settings': {'trial_cost': 500, 'single_cost_multiplier': 1.5}
    }
    
    for key, default_value in required_keys.items():
        if key not in st.session_state.data:
            st.session_state.data[key] = default_value

session_vars = {
    'page': 'login',
    'authenticated': False,
    'username': None,
    'role': None,
    'selected_teacher_id': None,
    'edit_student_id': None,
    'edit_direction_id': None,
    'edit_teacher_id': None,
    'direction_view_mode': 'table',
    'selected_date': datetime.now().date(),
    'show_clear_confirm': False,
    'bulk_upload_type': 'directions',
    'filter_direction': None,
    'recurring_lesson_id': None
}

for var, default in session_vars.items():
    if var not in st.session_state:
        st.session_state[var] = default

# --- Authentication Functions ---
def login(username, password):
    """Handles user login with role-based permissions."""
    if username in USERS and USERS[username]['password'] == password:
        st.session_state.authenticated = True
        st.session_state.username = username
        st.session_state.role = USERS[username]['role']
        st.session_state.teacher_id = USERS[username].get('teacher_id')
        
        st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
        st.cache_data.clear()
        st.session_state.page = 'home'
        st.rerun()
    else:
        st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
def check_permission(allowed_roles=None, teacher_only=False):
    """Decorator to check user permissions."""
    if allowed_roles is None:
        allowed_roles = ['admin']
    
    def decorator(func):
        def wrapper(*args, **kwargs):
            if not st.session_state.get('authenticated'):
                st.warning("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
                st.session_state.page = 'login'
                st.rerun()
                return
            
            if st.session_state.role not in allowed_roles:
                st.error("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
                return
            
            if teacher_only and st.session_state.teacher_id:
                # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                if 'teacher_id' in kwargs and kwargs['teacher_id'] != st.session_state.teacher_id:
                    st.error("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.")
                    return
            
            return func(*args, **kwargs)
        return wrapper
    return decorator
def logout():
    """Handles user logout."""
    st.session_state.authenticated = False
    st.session_state.username = None
    st.session_state.role = None
    st.cache_data.clear()
    st.session_state.page = 'login'
    st.info("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    st.rerun()

# --- Helper Functions ---
@st.cache_data
def get_student_by_id(student_id):
    """Get student by ID. Uses caching to improve performance."""
    return next((s for s in st.session_state.data['students'] if s.get('id') == student_id), None)

@st.cache_data
def get_direction_by_id(direction_id):
    """Get direction by ID. Uses caching to improve performance."""
    return next((d for d in st.session_state.data['directions'] if d.get('id') == direction_id), None)

@st.cache_data
def get_teacher_by_id(teacher_id):
    """Get teacher by ID. Uses caching to improve performance."""
    return next((t for t in st.session_state.data['teachers'] if t.get('id') == teacher_id), None)

@st.cache_data
def get_parent_by_id(parent_id):
    """Get parent by ID. Uses caching to improve performance."""
    return next((p for p in st.session_state.data['parents'] if p.get('id') == parent_id), None)

def get_students_by_direction(direction_name):
    """Get students attending a specific direction."""
    return [s for s in st.session_state.data['students'] if direction_name in s.get('directions', [])]

def get_schedule_by_day(day):
    """Get schedule entries for a specific day."""
    return [s for s in st.session_state.data['schedule'] if s.get('day') == day]

def calculate_age(birth_date):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞."""
    if isinstance(birth_date, datetime):
        birth_date = birth_date.date()
    elif isinstance(birth_date, str):
        try:
            birth_date = datetime.strptime(birth_date, '%Y-%m-%d').date()
        except ValueError:
            return None
    elif not isinstance(birth_date, date):
        return None
    
    today = date.today()
    return today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))

def suggest_directions(age, gender=None):
    """Suggest directions based on age and optional gender."""
    suitable = []
    for direction in st.session_state.data['directions']:
        min_age = direction.get('min_age', 0)
        max_age = direction.get('max_age', 18)
        if min_age <= age <= max_age:
            if not gender or not direction.get('gender') or direction.get('gender') == gender:
                suitable.append(direction)
    return suitable


# --- Page Content Functions ---
def show_home_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±–ª–æ–∂–∫–æ–π, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏."""
    st.header("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    
    # --- –û–±–ª–æ–∂–∫–∞ —Ü–µ–Ω—Ç—Ä–∞ ---
    st.subheader("üèûÔ∏è –û–±–ª–æ–∂–∫–∞ —Ü–µ–Ω—Ç—Ä–∞")
    cover_folder = os.path.join(MEDIA_FOLDER, "covers")
    os.makedirs(cover_folder, exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –æ–±–ª–æ–∂–∫–∏
    with st.expander("–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫—É"):
        uploaded_cover = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É", type=["jpg", "jpeg", "png"])
        if uploaded_cover:
            cover_path = os.path.join(cover_folder, "current_cover.jpg")
            with open(cover_path, "wb") as f:
                f.write(uploaded_cover.getbuffer())
            st.success("–û–±–ª–æ–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ–±–ª–æ–∂–∫–∏
    cover_path = os.path.join(cover_folder, "current_cover.jpg")
    if os.path.exists(cover_path):
        st.image(cover_path, use_column_width=True)
    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–ª–æ–∂–∫—É —Ü–µ–Ω—Ç—Ä–∞")
    
    # --- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ---
    st.subheader("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    schedule_by_day = defaultdict(list)
    for lesson in st.session_state.data['schedule']:
        schedule_by_day[lesson['day']].append(lesson)
    
    days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º
    for day in days_order:
        if day in schedule_by_day:
            with st.expander(f"{day}", expanded=True):
                lessons = schedule_by_day[day]
                lessons.sort(key=lambda x: x['start_time'])
                
                for lesson in lessons:
                    students_count = len([s for s in st.session_state.data['students'] 
                                       if lesson['direction'] in s['directions']])
                    st.write(f"‚è∞ {lesson['start_time']}-{lesson['end_time']}: "
                            f"**{lesson['direction']}** (–ø—Ä–µ–ø. {lesson['teacher']}) "
                            f"üë• {students_count} —É—á–µ–Ω–∏–∫–æ–≤")
    
    # --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π WhatsApp ---
    st.subheader("üí¨ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π WhatsApp")
    
    selected_day = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è", days_order)
    sticker_options = ["ü™ª", "üå∏", "üåº", "üå∫", "üå∑", "üíê", "üåπ", "üåª", "üåû", "üåà"]
    selected_sticker = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–∫–µ—Ä", sticker_options)
    
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"):
        lessons_today = [l for l in st.session_state.data['schedule'] if l['day'] == selected_day]
        if st.session_state.role == 'teacher':
            teacher = get_teacher_by_id(st.session_state.teacher_id)
            if teacher:
                lessons_today = [l for l in lessons_today if l.get('teacher') == teacher.get('name')]

        if lessons_today:
            message = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!{selected_sticker}\n–ü—Ä–∏–≥–ª–∞—à–∞–µ–º —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è:\n"
            
            lessons_today.sort(key=lambda x: x['start_time'])
            for lesson in lessons_today:
                # Removed age_text as it's often included in direction name already
                message += f"{lesson['start_time']} - {lesson['direction']}\n" 
            
            st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WhatsApp", message, height=200)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            st.markdown(f"""
            <a href="https://wa.me/?text={message.replace('\n', '%0A')}" target="_blank">
                <button style="background-color:#25D366;color:white;border:none;padding:10px 20px;border-radius:5px;">
                    –û—Ç–∫—Ä—ã—Ç—å –≤ WhatsApp
                </button>
            </a>
            """, unsafe_allow_html=True)
        else:
            st.warning("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π")
    
    # --- –ù–æ–≤–æ—Å—Ç–Ω–∞—è –ª–µ–Ω—Ç–∞ ---
    st.subheader("üì∞ –ù–æ–≤–æ—Å—Ç–Ω–∞—è –ª–µ–Ω—Ç–∞")
    news_folder = os.path.join(MEDIA_FOLDER, "news")
    os.makedirs(news_folder, exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    with st.expander("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"):
        with st.form("news_form"):
            news_text = st.text_area("–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏")
            news_media = st.file_uploader("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–¥–æ–∫—É–º–µ–Ω—Ç", type=["jpg", "jpeg", "png", "pdf"])
            submitted = st.form_submit_button("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
            
            if submitted and news_text:
                news_id = str(uuid.uuid4())
                news_data = {
                    "id": news_id,
                    "text": news_text,
                    "date": str(date.today()),
                    "author": st.session_state.username
                }
                
                if news_media:
                    ext = os.path.splitext(news_media.name)[1]
                    media_path = os.path.join(news_folder, f"{news_id}{ext}")
                    with open(media_path, "wb") as f:
                        f.write(news_media.getbuffer())
                    news_data["media"] = f"{news_id}{ext}"
                
                if "news" not in st.session_state.data:
                    st.session_state.data["news"] = []
                
                st.session_state.data["news"].insert(0, news_data)
                save_data(st.session_state.data)
                st.success("–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    if "news" in st.session_state.data and st.session_state.data["news"]:
        for news in st.session_state.data["news"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
            with st.container(border=True):
                st.write(f"**{news['date']}** (–∞–≤—Ç–æ—Ä: {news.get('author', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')})")
                st.write(news['text'])
                
                if "media" in news:
                    media_path = os.path.join(news_folder, news["media"])
                    if os.path.exists(media_path):
                        if news["media"].lower().endswith(('.png', '.jpg', '.jpeg')):
                            st.image(media_path, use_column_width=True)
                        elif news["media"].lower().endswith('.pdf'):
                            with open(media_path, "rb") as f:
                                st.download_button(
                                    label="üìÑ –°–∫–∞—á–∞—Ç—å PDF",
                                    data=f,
                                    file_name=news["media"],
                                    mime="application/pdf"
                                )
                
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_news_{news['id']}"):
                    st.session_state.data["news"] = [n for n in st.session_state.data["news"] if n['id'] != news['id']]
                    if "media" in news:
                        media_path = os.path.join(news_folder, news["media"])
                        if os.path.exists(media_path):
                            os.remove(media_path)
                    save_data(st.session_state.data)
                    st.success("–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!")
                    st.rerun()
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
def show_directions_page():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏: —Ç–∞–±–ª–∏—Ü–∞ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏."""
    st.header("üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")

    directions = st.session_state.data.get("directions", [])
    students = st.session_state.data.get("students", [])

    # üëâ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"):
        with st.form("new_direction_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1:
                name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ*")
                description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
                cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞", min_value=0.0, step=100.0, value=3000.0)
            with col2:
                trial = st.number_input("–ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ", min_value=0.0, value=500.0)
                min_age = st.number_input("–ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç", min_value=0, max_value=18, value=3)
                max_age = st.number_input("–ú–∞–∫—Å. –≤–æ–∑—Ä–∞—Å—Ç", min_value=0, max_value=18, value=12)
                gender = st.selectbox("–ü–æ–ª", ["–õ—é–±–æ–π", "–ú–∞–ª—å—á–∏–∫", "–î–µ–≤–æ—á–∫–∞"])

            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å"):
                if name:
                    new_direction = {
                        "id": str(uuid.uuid4()),
                        "name": name,
                        "description": description,
                        "cost": cost,
                        "trial_cost": trial,
                        "min_age": min_age,
                        "max_age": max_age,
                        "gender": gender if gender != "–õ—é–±–æ–π" else None
                    }
                    directions.append(new_direction)
                    save_data(st.session_state.data)
                    st.success(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
                    st.rerun()
                else:
                    st.error("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")

    # üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    st.markdown("### üìå –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    view_mode = st.radio("–†–µ–∂–∏–º", ["üìã –¢–∞–±–ª–∏—Ü–∞", "üßæ –ö–∞—Ä—Ç–æ—á–∫–∏"], horizontal=True)

    # üìã –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if view_mode == "üìã –¢–∞–±–ª–∏—Ü–∞":
        if directions:
            table_data = []
            for d in directions:
                if 'id' not in d:
                    d['id'] = str(uuid.uuid4())  # —Ñ–∏–∫—Å–∞—Ü–∏—è KeyError
                student_count = len([s for s in students if d['name'] in s.get("directions", [])])
                table_data.append({
                    "id": d["id"],
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": d["name"],
                    "–û–ø–∏—Å–∞–Ω–∏–µ": d.get("description", ""),
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å": d.get("cost", 0),
                    "–ü—Ä–æ–±–Ω–æ–µ": d.get("trial_cost", 0),
                    "–í–æ–∑—Ä–∞—Å—Ç": f"{d.get('min_age', '')}-{d.get('max_age', '')}",
                    "–ü–æ–ª": d.get("gender", "–õ—é–±–æ–π"),
                    "–£—á–µ–Ω–∏–∫–æ–≤": student_count
                })

            df = pd.DataFrame(table_data)
            edited_df = st.data_editor(
                df,
                use_container_width=True,
                num_rows="dynamic",
                hide_index=True,
                disabled=["id", "–£—á–µ–Ω–∏–∫–æ–≤"],
                column_config={
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å": st.column_config.NumberColumn(format="%.0f ‚ÇΩ"),
                    "–ü—Ä–æ–±–Ω–æ–µ": st.column_config.NumberColumn(format="%.0f ‚ÇΩ")
                }
            )

            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                for i, row in edited_df.iterrows():
                    for d in directions:
                        if d["id"] == row["id"]:
                            d["name"] = row["–ù–∞–∑–≤–∞–Ω–∏–µ"]
                            d["description"] = row["–û–ø–∏—Å–∞–Ω–∏–µ"]
                            d["cost"] = row["–°—Ç–æ–∏–º–æ—Å—Ç—å"]
                            d["trial_cost"] = row["–ü—Ä–æ–±–Ω–æ–µ"]
                            d["gender"] = row["–ü–æ–ª"] if row["–ü–æ–ª"] != "–õ—é–±–æ–π" else None
                            try:
                                min_a, max_a = map(int, str(row["–í–æ–∑—Ä–∞—Å—Ç"]).split('-'))
                                d["min_age"] = min_a
                                d["max_age"] = max_a
                            except Exception:
                                pass
                save_data(st.session_state.data)
                st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                st.rerun()
        else:
            st.info("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    # üßæ –ö–∞—Ä—Ç–æ—á–∫–∏
    elif view_mode == "üßæ –ö–∞—Ä—Ç–æ—á–∫–∏":
        if directions:
            for d in directions:
                if 'id' not in d:
                    d['id'] = str(uuid.uuid4())  # –∑–∞—â–∏—Ç–∞ –æ—Ç KeyError
                student_count = len([s for s in students if d["name"] in s.get("directions", [])])
                with st.container(border=True):
                    st.subheader(d["name"])
                    st.caption(d.get("description", ""))
                    col1, col2, col3 = st.columns(3)
                    col1.metric("üíµ –ê–±–æ–Ω–µ–º–µ–Ω—Ç", f"{d.get('cost', 0):.0f} ‚ÇΩ")
                    col2.metric("üé´ –ü—Ä–æ–±–Ω–æ–µ", f"{d.get('trial_cost', 0):.0f} ‚ÇΩ")
                    col3.metric("üë• –£—á–µ–Ω–∏–∫–æ–≤", student_count)

                    age_str = f"{d.get('min_age', '?')} - {d.get('max_age', '?')} –ª–µ—Ç"
                    st.markdown(f"**–í–æ–∑—Ä–∞—Å—Ç:** {age_str} | **–ü–æ–ª:** {d.get('gender', '–õ—é–±–æ–π')}")
        else:
            st.info("–ù–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

def show_student_card(student_id):
    student = get_student_by_id(student_id)
    if not student:
        st.warning("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    parent = get_parent_by_id(student.get('parent_id'))
    with st.expander(f"üìò {student['name']}", expanded=False):
        st.write(f"üë§ **–ü–æ–ª:** {student.get('gender')}")
        st.write(f"üéÇ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** {student.get('dob')} ‚Äî {calculate_age(student.get('dob'))} –ª–µ—Ç")
        st.write(f"üìÜ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {student.get('registration_date')}")
        st.write(f"üìù –ó–∞–º–µ—Ç–∫–∏: {student.get('notes', '')}")
        if parent:
            st.write(f"üë™ –†–æ–¥–∏—Ç–µ–ª—å: {parent.get('name')} | üìû {parent.get('phone')}")

        st.subheader("üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        for d in student.get("directions", []):
            with st.form(f"unassign_form_{student['id']}_{d}"):
                if st.form_submit_button(f"‚ùå –û—Ç–ø–∏—Å–∞—Ç—å –æ—Ç {d}"):
                    student['directions'].remove(d)
                    save_data(st.session_state.data)
                    st.success(f"–£—á–µ–Ω–∏–∫ –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç {d}")
                    st.rerun()

        available = [d['name'] for d in st.session_state.data['directions'] if d['name'] not in student.get("directions", [])]
        if available:
            with st.form(f"assign_dir_form_{student['id']}"):
                new_dir = st.selectbox("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", available, key=f"dir_sel_{student['id']}")
                if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å"):
                    student['directions'].append(new_dir)
                    save_data(st.session_state.data)
                    st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {new_dir}")
                    st.rerun()

        st.subheader("üí≥ –û–ø–ª–∞—Ç—ã")
        payments = [p for p in st.session_state.data['payments'] if p['student_id'] == student['id']]
        if payments:
            df_pay = pd.DataFrame(payments)
            df_pay['date'] = pd.to_datetime(df_pay['date'])
            st.dataframe(df_pay[['date', 'amount', 'direction', 'type', 'notes']], hide_index=True, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –æ–ø–ª–∞—Ç.")

        st.subheader("üìÖ –ü–æ—Å–µ—â–µ–Ω–∏—è")
        attendances = []
        for day, lessons in st.session_state.data.get("attendance", {}).items():
            for lesson_id, students in lessons.items():
                if student_id in students:
                    status = students[student_id]
                    lesson = next((l for l in st.session_state.data['schedule'] if l['id'] == lesson_id), None)
                    if lesson:
                        attendances.append({
                            "–î–∞—Ç–∞": day,
                            "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": lesson['direction'],
                            "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å": lesson['teacher'],
                            "–ë—ã–ª": "–î–∞" if status.get('present') else "–ù–µ—Ç",
                            "–û–ø–ª–∞—á–µ–Ω–æ": "–î–∞" if status.get('paid') else "–ù–µ—Ç",
                            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ": status.get('note', '')
                        })
        if attendances:
            st.dataframe(pd.DataFrame(attendances).sort_values("–î–∞—Ç–∞", ascending=False), use_container_width=True)
        else:
            st.info("–ù–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π.")




def show_teacher_card(teacher_id):
    teacher = get_teacher_by_id(teacher_id)
    if not teacher:
        st.warning("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with st.expander(f"üë©‚Äçüè´ {teacher.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}", expanded=False):
        col1, col2 = st.columns([1, 3])
        with col1:
            st.image("https://placehold.co/100x100/A3A3A3/FFFFFF?text=–§–æ—Ç–æ", width=100)
        with col2:
            st.write(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {teacher.get('phone', '–Ω–µ—Ç')}")
            st.write(f"üìß Email: {teacher.get('email', '–Ω–µ—Ç')}")
            st.write(f"üìù –ó–∞–º–µ—Ç–∫–∏: {teacher.get('notes', '')}")
            st.write(f"üóìÔ∏è –ü—Ä–∏–Ω—è—Ç: {teacher.get('hire_date', '')}")

        # üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        st.subheader("üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è")
        for direction_name in teacher.get('directions', []):
            st.markdown(f"### üìò {direction_name}")
            
            # –ù–∞–π–¥—ë–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            lessons = [l for l in st.session_state.data['schedule']
                      if l['direction'] == direction_name 
                      and l['teacher'] == teacher['name']]

            if not lessons:
                st.info("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é.")
                continue

            # –ù–∞–π–¥—ë–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            students_in_dir = [s for s in st.session_state.data['students'] 
                             if direction_name in s.get('directions', [])]
            
            if not students_in_dir:
                st.info("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
                continue

            # –°–æ–±–µ—Ä—ë–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö
            attendance_data = []
            attendance = st.session_state.data.get("attendance", {})
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–∞–π–¥—ë–º –≤—Å–µ –ø–æ—Å–µ—â–µ–Ω–∏—è
            for student in students_in_dir:
                for lesson in lessons:
                    lesson_id = lesson.get('id')
                    for date_str, day_lessons in attendance.items():
                        if lesson_id in day_lessons and student['id'] in day_lessons[lesson_id]:
                            record = day_lessons[lesson_id][student['id']]
                            
                            # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö)
                            paid_status = record.get('paid', False)
                            if not paid_status:
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º
                                for payment in st.session_state.data['payments']:
                                    if (payment['student_id'] == student['id'] and 
                                        payment['direction'] == direction_name):
                                        payment_date = datetime.strptime(payment['date'], "%Y-%m-%d").date()
                                        lesson_date = datetime.strptime(date_str, "%Y-%m-%d").date()
                                        
                                        if payment['type'] == "–ê–±–æ–Ω–µ–º–µ–Ω—Ç":
                                            if (payment_date.month == lesson_date.month and 
                                                payment_date.year == lesson_date.year):
                                                paid_status = True
                                                break
                                        elif payment['type'] in ["–†–∞–∑–æ–≤–æ–µ", "–ü—Ä–æ–±–Ω–æ–µ"]:
                                            if payment_date == lesson_date:
                                                paid_status = True
                                                break
                            
                            attendance_data.append({
                                "–£—á–µ–Ω–∏–∫": student['name'],
                                "–î–∞—Ç–∞": date_str,
                                "–ó–∞–Ω—è—Ç–∏–µ": f"{lesson['start_time']}-{lesson['end_time']}",
                                "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª": "‚úÖ" if record.get('present') else "‚ùå",
                                "–û–ø–ª–∞—á–µ–Ω–æ": "‚úÖ" if paid_status else "‚ùå",
                                "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ": record.get('note', '')
                            })

            if attendance_data:
                # –°–æ–∑–¥–∞—ë–º DataFrame –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                df = pd.DataFrame(attendance_data)
                df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])
                df = df.sort_values('–î–∞—Ç–∞', ascending=False)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                st.dataframe(
                    df,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        "–î–∞—Ç–∞": st.column_config.DateColumn(format="DD.MM.YYYY"),
                        "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª": st.column_config.TextColumn(),
                        "–û–ø–ª–∞—á–µ–Ω–æ": st.column_config.TextColumn()
                    }
                )
                
                # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
                csv = df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                    data=csv,
                    file_name=f"attendance_{teacher['name']}_{direction_name}.csv",
                    mime="text/csv"
                )
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö.")



def show_students_page():
    st.header("üë¶üëß –£—á–µ–Ω–∏–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã")

    students = st.session_state.data['students']
    parents = st.session_state.data['parents']
    directions = st.session_state.data['directions']

    # –î–æ–±–∞–≤–∏–º id –¥–ª—è –≤—Å–µ—Ö, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    for s in students:
        if 'id' not in s:
            s['id'] = str(uuid.uuid4())

    view_mode = st.radio("–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", ["üìã –¢–∞–±–ª–∏—Ü–∞", "üßæ –ö–∞—Ä—Ç–æ—á–∫–∏"], horizontal=True)

    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"):
        with st.form("new_student_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1:
                name = st.text_input("–§–ò–û*")
                dob = st.date_input("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*", value=date.today())
                gender = st.selectbox("–ü–æ–ª", ["–ú–∞–ª—å—á–∏–∫", "–î–µ–≤–æ—á–∫–∞"])
                notes = st.text_area("–ó–∞–º–µ—Ç–∫–∏")
            with col2:
                parent_map = {p['id']: f"{p['name']} ({p.get('phone', '-')})" for p in parents}
                parent_id = st.selectbox("–†–æ–¥–∏—Ç–µ–ª—å", [None] + list(parent_map.keys()),
                                         format_func=lambda x: parent_map.get(x, "–ù–æ–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å") if x else "–ù–æ–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å")
                new_parent_name = st.text_input("–ò–º—è –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è")
                new_parent_phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è")
                selected_dirs = st.multiselect("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", [d['name'] for d in directions])

            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å"):
                if name:
                    if not parent_id:
                        new_parent = {
                            "id": str(uuid.uuid4()),
                            "name": new_parent_name or f"–†–æ–¥–∏—Ç–µ–ª—å {name}",
                            "phone": new_parent_phone,
                            "children_ids": []
                        }
                        parents.append(new_parent)
                        parent_id = new_parent['id']
                    new_student = {
                        "id": str(uuid.uuid4()),
                        "name": name,
                        "dob": str(dob),
                        "gender": gender,
                        "parent_id": parent_id,
                        "directions": selected_dirs,
                        "notes": notes,
                        "registration_date": str(date.today())
                    }
                    students.append(new_student)
                    for p in parents:
                        if p['id'] == parent_id:
                            p.setdefault("children_ids", []).append(new_student['id'])
                    save_data(st.session_state.data)
                    st.success(f"–£—á–µ–Ω–∏–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω.")
                    st.rerun()
                else:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –§–ò–û.")

    if view_mode == "üìã –¢–∞–±–ª–∏—Ü–∞":
        if students:
            df = pd.DataFrame(students)
            df['parent'] = df['parent_id'].map({p['id']: p['name'] for p in parents})
            df['directions'] = df['directions'].apply(lambda x: ', '.join(x) if isinstance(x, list) else '')
            df['age'] = df['dob'].apply(calculate_age)
            df['id'] = df['id']  # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å

            edited = st.data_editor(
                df[['id', 'name', 'dob', 'age', 'gender', 'parent', 'directions', 'notes']],
                hide_index=True,
                use_container_width=True,
                disabled=["age", "parent"],
            )

            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                for i, row in edited.iterrows():
                    for s in students:
                        if s['id'] == row['id']:
                            s['name'] = row['name']
                            s['dob'] = str(row['dob']) if isinstance(row['dob'], date) else row['dob']
                            s['gender'] = row['gender']
                            s['notes'] = row['notes']
                            s['directions'] = [d.strip() for d in str(row['directions']).split(',') if d.strip()]
                save_data(st.session_state.data)
                st.success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                st.rerun()
        else:
            st.info("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
    else:
        for student in students:
            show_student_card(student['id'])

    # üí≥ –û–ø–ª–∞—Ç—ã
    st.subheader("üí≥ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É")
    if students:
        student_map = {s['id']: s['name'] for s in students}
        selected_id = st.selectbox("–£—á–µ–Ω–∏–∫", list(student_map.keys()), format_func=lambda x: student_map[x])
        with st.form("add_payment_form"):
            col1, col2 = st.columns(2)
            with col1:
                amount = st.number_input("–°—É–º–º–∞ (‚ÇΩ)", min_value=0.0)
                p_date = st.date_input("–î–∞—Ç–∞", value=date.today())
            with col2:
                direction = st.selectbox("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", [d['name'] for d in directions])
                p_type = st.selectbox("–¢–∏–ø", ["–ê–±–æ–Ω–µ–º–µ–Ω—Ç", "–ü—Ä–æ–±–Ω–æ–µ", "–†–∞–∑–æ–≤–æ–µ"])
            notes = st.text_input("–ó–∞–º–µ—Ç–∫–∏")

            # –í —Ñ—É–Ω–∫—Ü–∏–∏ show_students_page(), –≤ —Ä–∞–∑–¥–µ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:
            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É"):
                new_payment = {
                    "id": str(uuid.uuid4()),
                    "student_id": selected_id,
                    "date": str(p_date),
                    "amount": amount,
                    "direction": direction,
                    "type": p_type,
                    "notes": notes
                }
                st.session_state.data['payments'].append(new_payment)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø–æ—Å–µ—â–µ–Ω–∏—è–º–∏
                if p_type == "–ê–±–æ–Ω–µ–º–µ–Ω—Ç":
                    # –î–ª—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                    for schedule_item in st.session_state.data['schedule']:
                        if schedule_item['direction'] == direction:
                            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–∞—Ç—ã —ç—Ç–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
                            day_map = {
                                "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–í—Ç–æ—Ä–Ω–∏–∫": 1, "–°—Ä–µ–¥–∞": 2,
                                "–ß–µ—Ç–≤–µ—Ä–≥": 3, "–ü—è—Ç–Ω–∏—Ü–∞": 4, "–°—É–±–±–æ—Ç–∞": 5, "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
                            }
                            target_weekday = day_map.get(schedule_item['day'])
                            
                            if target_weekday is not None:
                                current_date = p_date
                                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
                                while current_date.month == p_date.month:
                                    if current_date.weekday() == target_weekday:
                                        date_key = current_date.strftime("%Y-%m-%d")
                                        lesson_id = schedule_item['id']
                                        
                                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏–π
                                        if date_key not in st.session_state.data['attendance']:
                                            st.session_state.data['attendance'][date_key] = {}
                                        if lesson_id not in st.session_state.data['attendance'][date_key]:
                                            st.session_state.data['attendance'][date_key][lesson_id] = {}
                                        if selected_id not in st.session_state.data['attendance'][date_key][lesson_id]:
                                            st.session_state.data['attendance'][date_key][lesson_id][selected_id] = {
                                                'present': False,
                                                'paid': True,  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–µ
                                                'note': '–ê–±–æ–Ω–µ–º–µ–Ω—Ç'
                                            }
                                        else:
                                            st.session_state.data['attendance'][date_key][lesson_id][selected_id]['paid'] = True
                                    current_date += timedelta(days=1)
                else:
                    # –î–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ/–ø—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–º–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
                    date_key = p_date.strftime("%Y-%m-%d")
                    for schedule_item in st.session_state.data['schedule']:
                        if schedule_item['direction'] == direction:
                            lesson_id = schedule_item['id']
                            if date_key not in st.session_state.data['attendance']:
                                st.session_state.data['attendance'][date_key] = {}
                            if lesson_id not in st.session_state.data['attendance'][date_key]:
                                st.session_state.data['attendance'][date_key][lesson_id] = {}
                            if selected_id not in st.session_state.data['attendance'][date_key][lesson_id]:
                                st.session_state.data['attendance'][date_key][lesson_id][selected_id] = {
                                    'present': False,
                                    'paid': True,  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–µ
                                    'note': p_type
                                }
                            else:
                                st.session_state.data['attendance'][date_key][lesson_id][selected_id]['paid'] = True
                
                save_data(st.session_state.data)
                st.success("–û–ø–ª–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–æ—Å–µ—â–µ–Ω–∏—è–º–∏!")
                st.rerun()



def show_teachers_page():
    st.header("üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")

    teachers = st.session_state.data.get("teachers", [])
    directions = st.session_state.data.get("directions", [])

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –≤—Å–µ—Ö –µ—Å—Ç—å id
    for t in teachers:
        if 'id' not in t:
            t['id'] = str(uuid.uuid4())

    # ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"):
        with st.form("new_teacher_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1:
                name = st.text_input("–§–ò–û*")
                phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
                email = st.text_input("Email")
            with col2:
                teacher_directions = st.multiselect("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", [d['name'] for d in directions])
                notes = st.text_area("–ó–∞–º–µ—Ç–∫–∏")

            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å"):
                if name:
                    new_teacher = {
                        'id': str(uuid.uuid4()),
                        'name': name,
                        'phone': phone,
                        'email': email,
                        'directions': teacher_directions,
                        'notes': notes,
                        'hire_date': str(date.today())
                    }
                    teachers.append(new_teacher)
                    save_data(st.session_state.data)
                    st.success(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {name} –¥–æ–±–∞–≤–ª–µ–Ω.")
                    st.rerun()
                else:
                    st.error("–§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")

    # üìã –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if teachers:
        df = pd.DataFrame(teachers)
        df['directions'] = df['directions'].apply(lambda x: ', '.join(x))
        df['id'] = df['id']

        edited_df = st.data_editor(
            df[['id', 'name', 'phone', 'email', 'directions', 'notes']],
            hide_index=True,
            use_container_width=True,
            disabled=['id'],
        )

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            for i, row in edited_df.iterrows():
                for t in teachers:
                    if t['id'] == row['id']:
                        t['name'] = row['name']
                        t['phone'] = row['phone']
                        t['email'] = row['email']
                        t['notes'] = row['notes']
                        # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∫ —Å–ø–∏—Å–æ–∫
                        t['directions'] = [d.strip() for d in row['directions'].split(',') if d.strip()]
                        break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            for teacher in teachers:
                old_name = next((t['name'] for t in st.session_state.data['teachers'] if t['id'] == teacher['id']), None)
                if old_name and old_name != teacher['name']:
                    for lesson in st.session_state.data['schedule']:
                        if lesson['teacher'] == old_name:
                            lesson['teacher'] = teacher['name']
            
            save_data(st.session_state.data)
            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
    else:
        st.info("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    # üßæ –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    st.subheader("üßæ –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
    for t in teachers:
        show_teacher_card(t['id'])


def show_schedule_page():
    st.header("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è")

    data = st.session_state.data
    schedule = data.setdefault("schedule", [])
    attendance = data.setdefault("attendance", {})
    payments = data.setdefault("payments", [])
    students = data.get("students", [])
    directions = data.get("directions", [])
    teachers = data.get("teachers", [])

    # === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è ===
    if st.session_state.role in ['admin', 'teacher']:
        with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", expanded=False):
            with st.form("new_schedule_form"):
                col1, col2 = st.columns(2)
                with col1:
                    direction_name = st.selectbox("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*", [d['name'] for d in directions])
                    teacher = st.selectbox("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å*", [t['name'] for t in teachers])
                with col2:
                    start_time = st.time_input("–ù–∞—á–∞–ª–æ*", value=datetime.strptime("16:00", "%H:%M").time())
                    end_time = st.time_input("–ö–æ–Ω–µ—Ü*", value=datetime.strptime("17:00", "%H:%M").time())
                    day_of_week = st.selectbox("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏*", [
                        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
                    ])

                if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"):
                    schedule.append({
                        'id': str(uuid.uuid4()),
                        'direction': direction_name,
                        'teacher': teacher,
                        'start_time': str(start_time),
                        'end_time': str(end_time),
                        'day': day_of_week
                    })
                    save_data(data)
                    st.success("–ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
                    st.rerun()

    # === –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –∑–∞–Ω—è—Ç–∏—è ===
    st.subheader("üóìÔ∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
    selected_date = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", value=st.session_state.get("selected_date", date.today()))
    st.session_state.selected_date = selected_date
    day_name = selected_date.strftime("%A")

    day_map = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞", "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    russian_day = day_map.get(day_name, day_name)
    lessons_today = [s for s in schedule if s['day'] == russian_day]

    if lessons_today:
        for lesson in lessons_today:
            with st.expander(f"{lesson['direction']} ({lesson['start_time']}-{lesson['end_time']}, {lesson['teacher']})", expanded=False):
                date_key = selected_date.strftime("%Y-%m-%d")
                lesson_key = lesson['id']
                att_key = f"att_{lesson_key}_{date_key}"

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if att_key not in st.session_state:
                    st.session_state[att_key] = {
                        'data': [],
                        'saved': False
                    }

                # –ù–∞–π–¥—ë–º —É—á–µ–Ω–∏–∫–æ–≤
                students_in_dir = [s for s in students if lesson['direction'] in s.get('directions', [])]
                
                if not students_in_dir:
                    st.info("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
                    continue

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Å–µ—â–µ–Ω–∏–π
                if date_key not in attendance:
                    attendance[date_key] = {}
                if lesson_key not in attendance[date_key]:
                    attendance[date_key][lesson_key] = {}

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                att_rows = []
                for s in students_in_dir:
                    student_id = s['id']
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
                    paid = False
                    for p in payments:
                        if p['student_id'] == student_id and p['direction'] == lesson['direction']:
                            p_date = datetime.strptime(p['date'], "%Y-%m-%d").date()
                            if p['type'] == "–ê–±–æ–Ω–µ–º–µ–Ω—Ç" and p_date.month == selected_date.month and p_date.year == selected_date.year:
                                paid = True
                                break
                            elif p['type'] in ["–†–∞–∑–æ–≤–æ–µ", "–ü—Ä–æ–±–Ω–æ–µ"] and p_date == selected_date:
                                paid = True
                                break
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏
                    if student_id not in attendance[date_key][lesson_key]:
                        attendance[date_key][lesson_key][student_id] = {
                            'present': False,
                            'paid': paid,
                            'note': ''
                        }
                    
                    att_rows.append({
                        "–£—á–µ–Ω–∏–∫": s['name'],
                        "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª": attendance[date_key][lesson_key][student_id]['present'],
                        "–û–ø–ª–∞—á–µ–Ω–æ": attendance[date_key][lesson_key][student_id]['paid'],
                        "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ": attendance[date_key][lesson_key][student_id]['note']
                    })

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
                if not st.session_state[att_key]['data']:
                    st.session_state[att_key]['data'] = att_rows

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
                edited_df = st.data_editor(
                    pd.DataFrame(st.session_state[att_key]['data']),
                    use_container_width=True,
                    hide_index=True,
                    key=f"editor_{att_key}",
                    column_config={
                        "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª": st.column_config.CheckboxColumn(),
                        "–û–ø–ª–∞—á–µ–Ω–æ": st.column_config.CheckboxColumn()
                    }
                )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è", key=f"save_{att_key}"):
                    for idx, s in enumerate(students_in_dir):
                        s_id = s['id']
                        attendance[date_key][lesson_key][s_id] = {
                            'present': bool(edited_df.iloc[idx]['–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª']),
                            'paid': bool(edited_df.iloc[idx]['–û–ø–ª–∞—á–µ–Ω–æ']),
                            'note': str(edited_df.iloc[idx]['–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'])
                        }
                    
                    st.session_state[att_key]['saved'] = True
                    st.session_state[att_key]['data'] = edited_df.to_dict('records')
                    save_data(data)
                    st.success("–ü–æ—Å–µ—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    time.sleep(0.3)
                    st.rerun()
    else:
        st.info(f"–ù–∞ {russian_day} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")

    # === –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ===
    st.subheader("üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    if schedule:
        df = pd.DataFrame(schedule)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        df['start_time'] = pd.to_datetime(df['start_time'], format='mixed', errors='coerce').dt.strftime("%H:%M")
        df['end_time'] = pd.to_datetime(df['end_time'], format='mixed', errors='coerce').dt.strftime("%H:%M")
        df['start_time'] = df['start_time'].fillna("‚Äî")
        df['end_time'] = df['end_time'].fillna("‚Äî")

        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3 = st.columns(3)
        with col1:
            day_filter = st.multiselect("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", sorted(df['day'].unique()))
        with col2:
            teacher_filter = st.multiselect("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", sorted(df['teacher'].unique()))
        with col3:
            dir_filter = st.multiselect("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", sorted(df['direction'].unique()))

        if day_filter:
            df = df[df['day'].isin(day_filter)]
        if teacher_filter:
            df = df[df['teacher'].isin(teacher_filter)]
        if dir_filter:
            df = df[df['direction'].isin(dir_filter)]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
        df['–£–¥–∞–ª–∏—Ç—å'] = False  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        edited_df = st.data_editor(
            df[['day', 'start_time', 'end_time', 'teacher', 'direction', '–£–¥–∞–ª–∏—Ç—å']],
            use_container_width=True,
            hide_index=True,
            key="full_schedule_editor",
            column_config={
                "–£–¥–∞–ª–∏—Ç—å": st.column_config.CheckboxColumn(
                    "–£–¥–∞–ª–∏—Ç—å",
                    help="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    default=False
                )
            }
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è"):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫, –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            rows_to_delete = edited_df[edited_df['–£–¥–∞–ª–∏—Ç—å']].index
            
            if len(rows_to_delete) > 0:
                # –£–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç–∏—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                for index in sorted(rows_to_delete, reverse=True):
                    # –ù–∞—Ö–æ–¥–∏–º ID –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    lesson_id = schedule[index]['id']
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    del schedule[index]
                    
                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è
                    for date_key in list(attendance.keys()):
                        if lesson_id in attendance[date_key]:
                            del attendance[date_key][lesson_id]
                        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã
                        if not attendance[date_key]:
                            del attendance[date_key]
                
                save_data(data)
                st.success(f"–£–¥–∞–ª–µ–Ω–æ {len(rows_to_delete)} –∑–∞–Ω—è—Ç–∏–π!")
                st.rerun()
            else:
                st.warning("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

        st.download_button(
            "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
            data=df.to_csv(index=False).encode('utf-8'),
            file_name="schedule_export.csv",
            mime="text/csv"
        )
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.")



def show_materials_page():
    """Page to manage materials and purchases."""
    st.header("üõçÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–∫—É–ø–∫–∏")
    
    # Add new material form
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª/–∑–∞–∫—É–ø–∫—É", expanded=False):
        with st.form("new_material_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1:
                material_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞*")
                cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±)*", min_value=0.0, step=1.0)
                direction = st.selectbox(
                    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                    [d['name'] for d in st.session_state.data['directions']]
                )
            with col2:
                purchase_date = st.date_input("–î–∞—Ç–∞ –∑–∞–∫—É–ø–∫–∏*", value=date.today())
                quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, value=1)
                supplier = st.text_input("–ü–æ—Å—Ç–∞–≤—â–∏–∫")
                link = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑")
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
            if submitted:
                if material_name and cost and purchase_date:
                    new_material = {
                        'id': str(uuid.uuid4()),
                        'name': material_name,
                        'cost': cost,
                        'quantity': quantity,
                        'total_cost': cost * quantity,
                        'direction': direction,
                        'date': str(purchase_date),
                        'supplier': supplier,
                        'link': link
                    }
                    st.session_state.data['materials'].append(new_material)
                    save_data(st.session_state.data)
                    st.success("–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)")

    st.subheader("üìã –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    if st.session_state.data['materials']:
        df_materials = pd.DataFrame(st.session_state.data['materials'])
        
        # Convert date strings to datetime for sorting
        df_materials['date'] = pd.to_datetime(df_materials['date'])
        
        # Sort by date descending
        df_materials = df_materials.sort_values('date', ascending=False)
        
        # Select columns to display
        display_cols = ['name', 'direction', 'quantity', 'cost', 'total_cost', 'date', 'supplier']
        df_display = df_materials[display_cols].copy()
        
        # Data editor
        edited_df = st.data_editor(
            df_display,
            num_rows="dynamic",
            use_container_width=True,
            column_config={
                "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                "direction": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                "quantity": "–ö–æ–ª-–≤–æ",
                "cost": "–¶–µ–Ω–∞",
                "total_cost": "–°—É–º–º–∞",
                "date": "–î–∞—Ç–∞",
                "supplier": "–ü–æ—Å—Ç–∞–≤—â–∏–∫"
            }
        )
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            # Update material data from edited DataFrame
            for idx, row in edited_df.iterrows():
                material_id = st.session_state.data['materials'][idx]['id']
                for m in st.session_state.data['materials']:
                    if m['id'] == material_id:
                        m['name'] = row['name']
                        m['direction'] = row['direction']
                        m['quantity'] = row['quantity']
                        m['cost'] = row['cost']
                        m['total_cost'] = row['total_cost']
                        m['date'] = str(row['date'].date())
                        m['supplier'] = row['supplier']
                        break
            
            save_data(st.session_state.data)
            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")

def show_kanban_board():
    """Page to manage kanban tasks."""
    st.header("üìå –ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞")
    
    # Add new task form
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É", expanded=False):
        with st.form("new_task_form", clear_on_submit=True):
            task_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏*")
            task_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
            task_priority = st.selectbox("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"])
            task_deadline = st.date_input("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            task_assignee = st.selectbox(
                "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
                [None] + [t['name'] for t in st.session_state.data['teachers']]
            )
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
            if submitted:
                if task_title:
                    new_task = {
                        'id': str(uuid.uuid4()),
                        'title': task_title,
                        'description': task_description,
                        'priority': task_priority,
                        'deadline': str(task_deadline) if task_deadline else None,
                        'assignee': task_assignee,
                        'created': str(date.today()),
                        'created_by': st.session_state.username
                    }
                    st.session_state.data['kanban_tasks']['ToDo'].append(new_task)
                    save_data(st.session_state.data)
                    st.success("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.rerun()
                else:
                    st.error("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    st.subheader("üìã –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏")
    cols = st.columns(3)
    status_map = {
        'ToDo': 'üìã –ù–µ —Å–¥–µ–ª–∞–Ω–æ',
        'InProgress': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'Done': '‚úÖ –ì–æ—Ç–æ–≤–æ'
    }
    
    for status, col in zip(['ToDo', 'InProgress', 'Done'], cols):
        with col:
            st.markdown(f"### {status_map[status]}")
            if st.session_state.data['kanban_tasks'][status]:
                for task in st.session_state.data['kanban_tasks'][status]:
                    with st.container(border=True):
                        # Task header with priority indicator
                        priority_colors = {
                            "–ù–∏–∑–∫–∏–π": "blue",
                            "–°—Ä–µ–¥–Ω–∏–π": "orange",
                            "–í—ã—Å–æ–∫–∏–π": "red"
                        }
                        st.markdown(
                            f"**{task['title']}** " 
                            f"<span style='color:{priority_colors.get(task.get('priority', '–ù–∏–∑–∫–∏–π'), 'gray')}'>"
                            f"‚¨§</span>",
                            unsafe_allow_html=True
                        )
                        
                        # Task details
                        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ"):
                            st.write(task['description'])
                            
                            if task.get('assignee'):
                                st.write(f"**–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:** {task['assignee']}")
                            
                            if task.get('deadline'):
                                deadline_date = datetime.strptime(task['deadline'], "%Y-%m-%d").date()
                                days_left = (deadline_date - date.today()).days
                                deadline_color = "red" if days_left < 0 else ("orange" if days_left < 3 else "green")
                                st.write(
                                    f"**–°—Ä–æ–∫:** <span style='color:{deadline_color}'>"
                                    f"{deadline_date.strftime('%d.%m.%Y')} ({days_left} –¥–Ω.)</span>",
                                    unsafe_allow_html=True
                                )
                            
                            st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {task.get('created')} ({task.get('created_by', '?')})")
                        
                        # Task actions
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            next_status = None
                            if status == 'ToDo':
                                if st.button("–ù–∞—á–∞—Ç—å", key=f"start_{task['id']}"):
                                    next_status = 'InProgress'
                            elif status == 'InProgress':
                                if st.button("–ó–∞–≤–µ—Ä—à–∏—Ç—å", key=f"complete_{task['id']}"):
                                    next_status = 'Done'
                            
                            if next_status:
                                st.session_state.data['kanban_tasks'][status].remove(task)
                                st.session_state.data['kanban_tasks'][next_status].append(task)
                                save_data(st.session_state.data)
                                st.rerun()
                        with col2:
                            if st.button("üóëÔ∏è", key=f"del_{task['id']}"):
                                st.session_state.data['kanban_tasks'][status].remove(task)
                                save_data(st.session_state.data)
                                st.rerun()
            else:
                st.info("–ù–µ—Ç –∑–∞–¥–∞—á")

def show_media_gallery_page():
    """Page to manage media files with folder support."""
    st.header("üñºÔ∏è –ú–µ–¥–∏–∞-–≥–∞–ª–µ—Ä–µ—è")
    
    # Create tabs for different media types
    tab_images, tab_docs, tab_videos, tab_folders = st.tabs(["–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–í–∏–¥–µ–æ", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏"])
    
    # Helper function to get all folders
    def get_folders(base_path):
        folders = []
        for item in os.listdir(base_path):
            item_path = os.path.join(base_path, item)
            if os.path.isdir(item_path):
                folders.append(item)
        return folders
    
    # Folder management tab
    with tab_folders:
        st.subheader("üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏")
        
        # Create new folder
        with st.expander("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É", expanded=True):
            with st.form("create_folder_form"):
                folder_type = st.selectbox("–¢–∏–ø –ø–∞–ø–∫–∏", ["–§–æ—Ç–æ", "–î–æ–∫—É–º–µ–Ω—Ç", "–í–∏–¥–µ–æ", "–û–±—â–∞—è"])
                folder_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏*")
                
                if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"):
                    if folder_name:
                        # Determine base folder based on type
                        base_folder = {
                            "–§–æ—Ç–æ": "images",
                            "–î–æ–∫—É–º–µ–Ω—Ç": "documents",
                            "–í–∏–¥–µ–æ": "videos",
                            "–û–±—â–∞—è": "general"
                        }.get(folder_type, "general")
                        
                        full_path = os.path.join(MEDIA_FOLDER, base_folder, folder_name)
                        try:
                            os.makedirs(full_path, exist_ok=True)
                            st.success(f"–ü–∞–ø–∫–∞ '{folder_name}' —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '{folder_type}'!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
                    else:
                        st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏")
        
        # List existing folders
        st.subheader("üìÅ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏")
        
        for media_type, base_folder in [("–§–æ—Ç–æ", "images"), 
                                      ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "documents"), 
                                      ("–í–∏–¥–µ–æ", "videos"),
                                      ("–û–±—â–∏–µ", "general")]:
            
            folder_path = os.path.join(MEDIA_FOLDER, base_folder)
            if os.path.exists(folder_path):
                folders = get_folders(folder_path)
                if folders:
                    with st.expander(f"{media_type} ({len(folders)})"):
                        for folder in folders:
                            col1, col2 = st.columns([4, 1])
                            with col1:
                                st.write(f"üìÅ {folder}")
                            with col2:
                                if st.button("üóëÔ∏è", key=f"del_{base_folder}_{folder}"):
                                    try:
                                        os.rmdir(os.path.join(folder_path, folder))
                                        st.success(f"–ü–∞–ø–∫–∞ '{folder}' —É–¥–∞–ª–µ–Ω–∞!")
                                        st.rerun()
                                    except OSError:
                                        st.error("–ü–∞–ø–∫–∞ –Ω–µ –ø—É—Å—Ç–∞! –£–¥–∞–ª–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª—ã.")
    
    # Upload section with folder selection
    with st.expander("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", expanded=False):
        with st.form("upload_media_form"):
            file_type = st.selectbox("–¢–∏–ø —Ñ–∞–π–ª–∞", ["–§–æ—Ç–æ", "–î–æ–∫—É–º–µ–Ω—Ç", "–í–∏–¥–µ–æ"])
            # Get available folders for selected type
            base_folder = {
                "–§–æ—Ç–æ": "images",
                "–î–æ–∫—É–º–µ–Ω—Ç": "documents",
                "–í–∏–¥–µ–æ": "videos"
            }.get(file_type, "general")
            
            target_folders = get_folders(os.path.join(MEDIA_FOLDER, base_folder))
            target_folder = st.selectbox(
                "–ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
                ["–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞"] + target_folders
            )
            
            uploaded_files = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã",
                type=["jpg", "jpeg", "png", "gif", "pdf", "doc", "docx", "mp4", "mov"],
                accept_multiple_files=True
            )
            
            if st.form_submit_button("–ó–∞–≥—Ä—É–∑–∏—Ç—å"):
                if uploaded_files:
                    for uploaded_file in uploaded_files:
                        # Determine target path
                        if target_folder == "–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞":
                            dest_folder = os.path.join(MEDIA_FOLDER, base_folder)
                        else:
                            dest_folder = os.path.join(MEDIA_FOLDER, base_folder, target_folder)
                        
                        os.makedirs(dest_folder, exist_ok=True)
                        file_path = os.path.join(dest_folder, uploaded_file.name)
                        
                        # Check for existing file
                        if os.path.exists(file_path):
                            st.warning(f"–§–∞–π–ª '{uploaded_file.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ '{target_folder}'")
                            continue
                        
                        try:
                            with open(file_path, "wb") as f:
                                f.write(uploaded_file.getbuffer())
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ '{uploaded_file.name}': {e}")
                    
                    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫—É '{target_folder}'!")
                    st.rerun()
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª")

    # Display media by type with folder support
    def display_media_with_folders(media_type, extensions, tab):
        base_folder = {
            "–§–æ—Ç–æ": "images",
            "–î–æ–∫—É–º–µ–Ω—Ç": "documents",
            "–í–∏–¥–µ–æ": "videos"
        }.get(media_type, "general")
        
        main_folder_path = os.path.join(MEDIA_FOLDER, base_folder)
        
        if not os.path.exists(main_folder_path):
            tab.info(f"–ù–µ—Ç {media_type.lower()} –≤ –≥–∞–ª–µ—Ä–µ–µ.")
            return
        
        # Get all folders for this media type
        folders = get_folders(main_folder_path)
        
        if not folders:
            # Display files from main folder
            display_files_from_folder(main_folder_path, extensions, tab, media_type)
        else:
            # Create tabs for each folder
            folder_tabs = tab.tabs(["–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞"] + folders)
            
            # Main folder
            with folder_tabs[0]:
                display_files_from_folder(main_folder_path, extensions, tab, media_type)
            
            # Each subfolder
            for i, folder in enumerate(folders, 1):
                with folder_tabs[i]:
                    folder_path = os.path.join(main_folder_path, folder)
                    display_files_from_folder(folder_path, extensions, tab, media_type, folder)

    def display_files_from_folder(folder_path, extensions, tab, media_type, folder_name=None):
        files = []
        for file in os.listdir(folder_path):
            file_path = os.path.join(folder_path, file)
            if os.path.isfile(file_path) and file.lower().endswith(extensions):
                files.append(file_path)
        
        if not files:
            tab.info(f"–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {folder_name if folder_name else '–æ—Å–Ω–æ–≤–Ω–æ–π'}")
            return
        
        if media_type == "–§–æ—Ç–æ":
            cols = tab.columns(3)
            for i, img_path in enumerate(files):
                with cols[i % 3]:
                    st.image(img_path, use_column_width=True)
                    st.caption(os.path.basename(img_path))
                    if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_img_{img_path}"):
                        os.remove(img_path)
                        st.success("–§–∞–π–ª —É–¥–∞–ª–µ–Ω!")
                        st.rerun()
        
        elif media_type == "–î–æ–∫—É–º–µ–Ω—Ç":
            for doc_path in files:
                doc_name = os.path.basename(doc_path)
                st.download_button(
                    label=f"üìÑ {doc_name}",
                    data=open(doc_path, "rb").read(),
                    file_name=doc_name,
                    mime="application/octet-stream",
                    key=f"doc_{doc_path}"
                )
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_doc_{doc_path}"):
                    os.remove(doc_path)
                    st.success("–§–∞–π–ª —É–¥–∞–ª–µ–Ω!")
                    st.rerun()
        
        elif media_type == "–í–∏–¥–µ–æ":
            for video_path in files:
                st.video(video_path)
                st.caption(os.path.basename(video_path))
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_vid_{video_path}"):
                    os.remove(video_path)
                    st.success("–§–∞–π–ª —É–¥–∞–ª–µ–Ω!")
                    st.rerun()

    # Display media in respective tabs with folder support
    with tab_images:
        st.subheader("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        display_media_with_folders("–§–æ—Ç–æ", ('.png', '.jpg', '.jpeg', '.gif'), st)

    with tab_docs:
        st.subheader("–î–æ–∫—É–º–µ–Ω—Ç—ã")
        display_media_with_folders("–î–æ–∫—É–º–µ–Ω—Ç", ('.pdf', '.doc', '.docx'), st)

    with tab_videos:
        st.subheader("–í–∏–¥–µ–æ")
        display_media_with_folders("–í–∏–¥–µ–æ", ('.mp4', '.mov'), st)

def show_bulk_upload_page():
    """Page for bulk data upload via CSV."""
    st.header("üì§ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # Select data type to upload
    data_type = st.selectbox(
        "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
        ["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–£—á–µ–Ω–∏–∫–∏", "–†–æ–¥–∏—Ç–µ–ª–∏", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã","–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]
    )
    
    # Upload CSV file
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª",
        type=["csv"],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö"
    )
    
    if uploaded_file:
        # Read CSV file
        try:
            df = pd.read_csv(uploaded_file)
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            st.dataframe(df.head())
            
            # Process based on data type
            if st.button("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                try:
                    if data_type == "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è":
                        required_cols = ['name', 'cost']
                        if all(col in df.columns for col in required_cols):
                            new_directions = []
                            for _, row in df.iterrows():
                                new_direction = {
                                    'id': str(uuid.uuid4()),
                                    'name': row['name'],
                                    'description': row.get('description', ''),
                                    'cost': float(row['cost']),
                                    'trial_cost': float(row.get('trial_cost', row['cost'] * 0.2)),
                                    'min_age': int(row.get('min_age', 3)),
                                    'max_age': int(row.get('max_age', 12)),
                                    'gender': row.get('gender', None)
                                }
                                new_directions.append(new_direction)
                            
                            st.session_state.data['directions'].extend(new_directions)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π!")
                    
                    elif data_type == "–£—á–µ–Ω–∏–∫–∏":
                        required_cols = ['name', 'dob']
                        if all(col in df.columns for col in required_cols):
                            new_students = []
                            for _, row in df.iterrows():
                                new_student = {
                                    'id': str(uuid.uuid4()),
                                    'name': row['name'],
                                    'dob': row['dob'],
                                    'gender': row.get('gender', '–ú–∞–ª—å—á–∏–∫'),
                                    'parent_id': None,  # Will need to handle parents separately
                                    'directions': row.get('directions', '').split(',') if pd.notna(row.get('directions')) else [],
                                    'notes': row.get('notes', ''),
                                    'registration_date': str(date.today())
                                }
                                new_students.append(new_student)
                            
                            st.session_state.data['students'].extend(new_students)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_students)} —É—á–µ–Ω–∏–∫–æ–≤!")
                    
                    elif data_type == "–†–æ–¥–∏—Ç–µ–ª–∏":
                        required_cols = ['name', 'phone']
                        if all(col in df.columns for col in required_cols):
                            new_parents = []
                            for _, row in df.iterrows():
                                new_parent = {
                                    'id': str(uuid.uuid4()),
                                    'name': row['name'],
                                    'phone': str(row['phone']),
                                    'email': row.get('email', ''),
                                    'children_ids': []
                                }
                                new_parents.append(new_parent)
                            
                            st.session_state.data['parents'].extend(new_parents)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_parents)} —Ä–æ–¥–∏—Ç–µ–ª–µ–π!")
                    
                    elif data_type == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏":
                        required_cols = ['name']
                        if all(col in df.columns for col in required_cols):
                            new_teachers = []
                            for _, row in df.iterrows():
                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π - —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
                                raw_directions = row.get('directions', '')
                                if pd.notna(raw_directions):
                                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –∑–∞–ø—è—Ç—ã–º
                                    raw_dir_list = [d.strip() for d in raw_directions.split(',')]
                                    valid_directions = []
                                    
                                    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
                                    for dir_name in raw_dir_list:
                                        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                                        exact_match = next((d for d in st.session_state.data['directions'] 
                                                          if d['name'].lower() == dir_name.lower()), None)
                                        if exact_match:
                                            valid_directions.append(exact_match['name'])
                                        else:
                                            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
                                            partial_match = next((d for d in st.session_state.data['directions'] 
                                                                if dir_name.lower() in d['name'].lower()), None)
                                            if partial_match:
                                                valid_directions.append(partial_match['name'])
                                    
                                    directions = list(set(valid_directions))  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                                else:
                                    directions = []
                                
                                new_teacher = {
                                    'id': str(uuid.uuid4()),
                                    'name': row['name'],
                                    'phone': str(row.get('phone', '')),
                                    'email': row.get('email', ''),
                                    'directions': directions,
                                    'notes': row.get('notes', ''),
                                    'hire_date': str(date.today())
                                }
                                new_teachers.append(new_teacher)
                            
                            st.session_state.data['teachers'].extend(new_teachers)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_teachers)} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π!")
                            
                    
                    elif data_type == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
                        required_cols = ['name', 'cost', 'direction']
                        if all(col in df.columns for col in required_cols):
                            new_materials = []
                            for _, row in df.iterrows():
                                new_material = {
                                    'id': str(uuid.uuid4()),
                                    'name': row['name'],
                                    'cost': float(row['cost']),
                                    'quantity': int(row.get('quantity', 1)),
                                    'total_cost': float(row['cost']) * int(row.get('quantity', 1)),
                                    'direction': row['direction'],
                                    'date': str(date.today()),
                                    'supplier': row.get('supplier', ''),
                                    'link': row.get('link', '')
                                }
                                new_materials.append(new_material)
                            
                            st.session_state.data['materials'].extend(new_materials)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!")
                    # --- –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –†–ê–°–ü–ò–°–ê–ù–ò–Ø ---
                    elif data_type == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                        required_cols = ['direction', 'teacher', 'start_time', 'end_time', 'day']
                        if all(col in df.columns for col in required_cols):
                            new_schedule_entries = []
                            for _, row in df.iterrows():
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
                                direction_exists = any(d['name'] == row['direction'] for d in st.session_state.data['directions'])
                                teacher_exists = any(t['name'] == row['teacher'] for t in st.session_state.data['teachers'])

                                if not direction_exists:
                                    st.warning(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{row['direction']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–Ω—è—Ç–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ, –Ω–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é.")
                                if not teacher_exists:
                                    st.warning(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{row['teacher']}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–Ω—è—Ç–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ, –Ω–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
                                
                                new_schedule_entry = {
                                    'id': str(uuid.uuid4()),
                                    'direction': row['direction'],
                                    'teacher': row['teacher'],
                                    'start_time': str(row['start_time']), # –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
                                    'end_time': str(row['end_time']),     # –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
                                    'day': row['day'] # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
                                }
                                new_schedule_entries.append(new_schedule_entry)
                            
                            st.session_state.data['schedule'].extend(new_schedule_entries)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_schedule_entries)} –∑–∞–Ω—è—Ç–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")
                    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---
                    
                    save_data(st.session_state.data)
                    st.rerun()
                
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

def show_payments_report():
    """Page for payments report."""
    st.header("üìä –û—Ç—á–µ—Ç –ø–æ –æ–ø–ª–∞—Ç–∞–º")
    
    if st.session_state.data['payments']:
        df_payments = pd.DataFrame(st.session_state.data['payments'])
        
        # Convert date strings to datetime
        df_payments['date'] = pd.to_datetime(df_payments['date'])
        
        # Add student names
        student_id_to_name = {s['id']: s['name'] for s in st.session_state.data['students']}
        df_payments['student'] = df_payments['student_id'].map(student_id_to_name)
        
        # Date range filter
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=df_payments['date'].min().date())
        with col2:
            end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", value=df_payments['date'].max().date())
        
        # Filter by date range
        df_filtered = df_payments[
            (df_payments['date'].dt.date >= start_date) & 
            (df_payments['date'].dt.date <= end_date)
        ]
        
        if not df_filtered.empty:
            # Display filtered data
            st.dataframe(
                df_filtered[['student', 'date', 'amount', 'direction', 'type', 'notes']],
                use_container_width=True
            )
            
            # Summary statistics
            total_payments = df_filtered['amount'].sum()
            st.subheader(f"–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç: {total_payments:.2f} —Ä—É–±.")
            
            # Group by direction and type
            st.subheader("–û–ø–ª–∞—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º")
            payments_by_direction = df_filtered.groupby('direction')['amount'].sum().reset_index()
            st.bar_chart(payments_by_direction.set_index('direction'))
            
            st.subheader("–û–ø–ª–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º")
            payments_by_type = df_filtered.groupby('type')['amount'].sum().reset_index()
            st.bar_chart(payments_by_type.set_index('type'))
            
            # Export button
            csv = df_filtered.to_csv(index=False).encode('utf-8')
            st.download_button(
                "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                data=csv,
                file_name=f"payments_report_{start_date}_{end_date}.csv",
                mime="text/csv"
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–ª–∞—Ç–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–ª–∞—Ç–∞–º.")

def show_materials_report():
    """Page for materials report."""
    st.header("üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º")
    
    if st.session_state.data['materials']:
        df_materials = pd.DataFrame(st.session_state.data['materials'])
        
        # Convert date strings to datetime
        df_materials['date'] = pd.to_datetime(df_materials['date'])
        
        # Date range filter
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=df_materials['date'].min().date())
        with col2:
            end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", value=df_materials['date'].max().date())
        
        # Filter by date range
        df_filtered = df_materials[
            (df_materials['date'].dt.date >= start_date) & 
            (df_materials['date'].dt.date <= end_date)
        ]
        
        if not df_filtered.empty:
            # Display filtered data
            st.dataframe(
                df_filtered[['name', 'direction', 'quantity', 'cost', 'total_cost', 'date', 'supplier']],
                use_container_width=True
            )
            
            # Summary statistics
            total_cost = df_filtered['total_cost'].sum()
            st.subheader(f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ç—Ä–∞—Ç: {total_cost:.2f} —Ä—É–±.")
            
            # Group by direction
            st.subheader("–ó–∞—Ç—Ä–∞—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º")
            materials_by_direction = df_filtered.groupby('direction')['total_cost'].sum().reset_index()
            st.bar_chart(materials_by_direction.set_index('direction'))
            
            # Export button
            csv = df_filtered.to_csv(index=False).encode('utf-8')
            st.download_button(
                "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                data=csv,
                file_name=f"materials_report_{start_date}_{end_date}.csv",
                mime="text/csv"
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫—É–ø–∫–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫—É–ø–∫–∞–º.")

def show_reception_helper():
    """Page for reception helper to suggest directions."""
    st.header("üëã –ü–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å–µ–ø—à–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    direction_categories = {
        "–Ø–∑—ã–∫–∏": ["–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫"],
        "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ": [
            "–°—Ç—É–¥–∏—è –∂–∏–≤–æ–ø–∏—Å–∏ —Å 4 –ª–µ—Ç –∏ —Å 6 –ª–µ—Ç", 
            "–ì–æ–Ω—á–∞—Ä–Ω–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è —Å 5 –ª–µ—Ç",
            "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ç—É–¥–∏—è —Å 5 –ª–µ—Ç"
        ],
        "–ú—É–∑—ã–∫–∞": [
            "–í–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç—É–¥–∏—è —Å 5 –ª–µ—Ç",
            "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞–Ω—Å–∞–º–±–ª—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö",
            "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –≥–∏—Ç–∞—Ä–µ"
        ],
        "–¢–∞–Ω—Ü—ã": ["–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è —Å—Ç—É–¥–∏—è —Å 4 –ª–µ—Ç"],
        "–ù–∞—É–∫–∞": [
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –æ–ø—ã—Ç–æ–≤ —Å 6 –ª–µ—Ç",
            "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"
        ],
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ": [
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ –∏ –í–ü–†", 
            "–ö—É—Ä—Å \"–ü–∏—à—É –∫—Ä–∞—Å–∏–≤–æ\"",
            "–†–µ—á–µ–≤–∞—è —Å—Ç—É–¥–∏—è \"–ì–æ–≤–æ—Ä—É—à–∞\" (5-7 –ª–µ—Ç)"
        ],
        "–õ–æ–≥–æ–ø–µ–¥–∏—è": ["–õ–æ–≥–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è"],
        "–®–∞—Ö–º–∞—Ç—ã": ["–®–∞—Ö–º–∞—Ç–Ω—ã–π –∫–ª—É–± —Å 5 –ª–µ—Ç"],
        "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ": [
            "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏",
            "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é",
            "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É"
        ]
    }
    
    with st.form("child_info_form"):
        col1, col2 = st.columns(2)
        with col1:
            child_age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞", min_value=0, max_value=18, value=5)
            gender = st.selectbox("–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞", ["–ú–∞–ª—å—á–∏–∫", "–î–µ–≤–æ—á–∫–∞", "–ù–µ –≤–∞–∂–Ω–æ"])
        with col2:
            interests = st.multiselect(
                "–ò–Ω—Ç–µ—Ä–µ—Å—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                list(direction_categories.keys())
            )
        
        if st.form_submit_button("–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"):
            # –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –ø–æ–ª—É
            suitable_directions = suggest_directions(child_age, gender if gender != "–ù–µ –≤–∞–∂–Ω–æ" else None)
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if interests:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                interested_directions = []
                for interest in interests:
                    interested_directions.extend(direction_categories.get(interest, []))
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                suitable_directions = [
                    d for d in suitable_directions 
                    if d['name'] in interested_directions
                ]
            
            if suitable_directions:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(suitable_directions)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                categorized = defaultdict(list)
                for direction in suitable_directions:
                    for category, dirs in direction_categories.items():
                        if direction['name'] in dirs:
                            categorized[category].append(direction)
                            break
                    else:
                        categorized["–î—Ä—É–≥–∏–µ"].append(direction)
                
                # –í—ã–≤–æ–¥–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                for category, directions in categorized.items():
                    with st.expander(f"**{category}** ({len(directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)"):
                        cols = st.columns(2)
                        for i, direction in enumerate(directions):
                            with cols[i % 2]:
                                with st.container(border=True):
                                    st.subheader(direction['name'])
                                    st.write(f"**–í–æ–∑—Ä–∞—Å—Ç:** {direction.get('min_age', '?')}-{direction.get('max_age', '?')} –ª–µ—Ç")
                                    st.write(f"**–ê–±–æ–Ω–µ–º–µ–Ω—Ç:** {direction['cost']} —Ä—É–±.")
                                    st.write(f"**–ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ:** {direction.get('trial_cost', '?')} —Ä—É–±.")
                                    
                                    if direction.get('description'):
                                        st.caption(direction['description'])
            else:
                st.info("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
# --- Main App Title and Navigation ---
st.title("üè´ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç—Å–∫–∏–º —Ü–µ–Ω—Ç—Ä–æ–º")

# If not authenticated, show login page
if not st.session_state.authenticated:
    st.header("üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    with st.form("login_form"):
        username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")
        if submitted:
            login(username, password)

# If authenticated, show the main app
else:
    # Sidebar navigation menu
    st.sidebar.title("üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    def _navigate_to(page_name):
        st.cache_data.clear() 
        st.session_state.page = page_name
        st.rerun()

    if st.session_state.role == 'admin':
        st.sidebar.button("üè† –ì–ª–∞–≤–Ω–∞—è", on_click=lambda: _navigate_to('home'))
        st.sidebar.button("üé® –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", on_click=lambda: _navigate_to('directions'))
        st.sidebar.button("üë¶ –£—á–µ–Ω–∏–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã", on_click=lambda: _navigate_to('students'))
        st.sidebar.button("üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", on_click=lambda: _navigate_to('teachers'))
        st.sidebar.button("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è", on_click=lambda: _navigate_to('schedule'))
        st.sidebar.button("üõçÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–∫—É–ø–∫–∏", on_click=lambda: _navigate_to('materials'))
        st.sidebar.button("üìå –ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞", on_click=lambda: _navigate_to('kanban'))
        st.sidebar.button("üñºÔ∏è –ú–µ–¥–∏–∞-–≥–∞–ª–µ—Ä–µ—è", on_click=lambda: _navigate_to('media_gallery'))
        st.sidebar.button("üì§ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", on_click=lambda: _navigate_to('bulk_upload'))
        st.sidebar.button("üëã –ü–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å–µ–ø—à–µ–Ω–∞", on_click=lambda: _navigate_to('reception_helper'))
        
        st.sidebar.markdown("---")
        st.sidebar.button("üìä –û—Ç—á–µ—Ç –ø–æ –æ–ø–ª–∞—Ç–∞–º", on_click=lambda: _navigate_to('payments_report'))
        st.sidebar.button("üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º", on_click=lambda: _navigate_to('materials_report'))
        
    elif st.session_state.role == 'teacher':
        st.sidebar.button("üè† –ì–ª–∞–≤–Ω–∞—è", on_click=lambda: _navigate_to('home'))
        st.sidebar.button("üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", on_click=lambda: _navigate_to('teachers'))
        st.sidebar.button("üõçÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–∫—É–ø–∫–∏", on_click=lambda: _navigate_to('materials'))
        st.sidebar.button("üìå –ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞", on_click=lambda: _navigate_to('kanban'))
        st.sidebar.button("üñºÔ∏è –ú–µ–¥–∏–∞-–≥–∞–ª–µ—Ä–µ—è", on_click=lambda: _navigate_to('media_gallery'))
    
    elif st.session_state.role == 'reception':
        st.sidebar.button("üè† –ì–ª–∞–≤–Ω–∞—è", on_click=lambda: _navigate_to('home'))
        st.sidebar.button("üé® –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", on_click=lambda: _navigate_to('directions'))
        st.sidebar.button("üë¶ –£—á–µ–Ω–∏–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã", on_click=lambda: _navigate_to('students'))
        st.sidebar.button("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è", on_click=lambda: _navigate_to('schedule'))
        st.sidebar.button("üõçÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–∫—É–ø–∫–∏", on_click=lambda: _navigate_to('materials'))
        st.sidebar.button("üìå –ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞", on_click=lambda: _navigate_to('kanban'))
        st.sidebar.button("üëã –ü–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å–µ–ø—à–µ–Ω–∞", on_click=lambda: _navigate_to('reception_helper'))
    
    st.sidebar.markdown("---")
    st.sidebar.text(f"üë§ {st.session_state.username} ({st.session_state.role})")
    st.sidebar.button("üö™ –í—ã–π—Ç–∏", on_click=logout)
    
    # Clear data confirmation (admin only)
    if st.session_state.role == 'admin':
        if st.sidebar.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"):
            st.session_state.show_clear_confirm = True
        
        if st.session_state.show_clear_confirm:
            st.sidebar.warning("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! –í—ã —É–≤–µ—Ä–µ–Ω—ã?")
            col1, col2 = st.sidebar.columns(2)
            if col1.button("‚úÖ –î–∞"):
                initial_data = {
                    'directions': [],
                    'students': [],
                    'teachers': [],
                    'parents': [],
                    'payments': [],
                    'schedule': [],
                    'materials': [],
                    'kanban_tasks': {'ToDo': [], 'InProgress': [], 'Done': []},
                    'attendance': {},
                    'settings': {'trial_cost': 500, 'single_cost_multiplier': 1.5}
                }
                save_data(initial_data)
                st.session_state.data = load_data()
                st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
                st.session_state.show_clear_confirm = False
                st.rerun()
            if col2.button("‚ùå –ù–µ—Ç"):
                st.session_state.show_clear_confirm = False
                st.rerun()

    # --- Page Routing ---
    if st.session_state.page == 'home':
        show_home_page()
    elif st.session_state.page == 'directions':
        show_directions_page()
    elif st.session_state.page == 'students':
        show_students_page()
    elif st.session_state.page == 'teachers':
        show_teachers_page()
    elif st.session_state.page == 'schedule':
        show_schedule_page()
    elif st.session_state.page == 'materials':
        show_materials_page()
    elif st.session_state.page == 'kanban':
        show_kanban_board()
    elif st.session_state.page == 'media_gallery':
        show_media_gallery_page()
    elif st.session_state.page == 'bulk_upload':
        show_bulk_upload_page()
    elif st.session_state.page == 'payments_report':
        show_payments_report()
    elif st.session_state.page == 'materials_report':
        show_materials_report()
    elif st.session_state.page == 'reception_helper':
        show_reception_helper()
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞.")