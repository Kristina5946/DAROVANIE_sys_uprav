# Import necessary libraries
import streamlit as st
import pandas as pd
import json
import os
from datetime import date, datetime
from collections import defaultdict
import uuid
import csv
from io import StringIO

# --- Configuration and Data Storage ---
# Use JSON file for persistent data storage
DATA_FILE = 'center_data.json'
MEDIA_FOLDER = 'media'
st.set_page_config(layout="wide", page_title="–î–µ—Ç—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

# User authentication data (for a small, local app)
USERS = {
    "admin": {"password": "admin123", "role": "admin"},
    "teacher": {"password": "teacher123", "role": "teacher"},
    "reception": {"password": "reception123", "role": "reception"}
}

# Check if the data file exists, if not, create a new one with an empty structure
if not os.path.exists(DATA_FILE):
    initial_data = {
        'news': [],
        'directions': [],
        'students': [],
        'teachers': [],
        'parents': [],
        'payments': [],
        'schedule': [],
        'materials': [],
        'attendance': {},
        'kanban_tasks': {
            'ToDo': [],
            'InProgress': [],
            'Done': []
        },
        'settings': {
            'trial_cost': 500,
            'single_cost_multiplier': 1.5
        }
    }
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(initial_data, f, ensure_ascii=False, indent=4)

# Ensure the media folder exists
if not os.path.exists(MEDIA_FOLDER):
    os.makedirs(MEDIA_FOLDER)

# Load data from JSON file
def load_data():
    """Load data from the JSON file."""
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# Save data to JSON file
def save_data(data):
    """Save data to the JSON file."""
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# Initialize session state for the app
if 'data' not in st.session_state:
    st.session_state.data = load_data()
    # Initialize all required keys if they don't exist
    required_keys = {
        'directions': [],
        'students': [],
        'teachers': [],
        'parents': [],
        'payments': [],
        'schedule': [],
        'materials': [],
        'kanban_tasks': {'ToDo': [], 'InProgress': [], 'Done': []},
        'attendance': {},
        'settings': {'trial_cost': 500, 'single_cost_multiplier': 1.5}
    }
    
    for key, default_value in required_keys.items():
        if key not in st.session_state.data:
            st.session_state.data[key] = default_value

# Initialize other session state variables
session_vars = {
    'page': 'login',
    'authenticated': False,
    'username': None,
    'role': None,
    'selected_teacher_id': None,
    'edit_student_id': None,
    'edit_direction_id': None,
    'edit_teacher_id': None,
    'direction_view_mode': 'table',
    'selected_date': datetime.now().date(),
    'show_clear_confirm': False,
    'bulk_upload_type': 'directions'
}

for var, default in session_vars.items():
    if var not in st.session_state:
        st.session_state[var] = default

# --- Authentication Functions ---
def login(username, password):
    """Handles user login."""
    if username in USERS and USERS[username]['password'] == password:
        st.session_state.authenticated = True
        st.session_state.username = username
        st.session_state.role = USERS[username]['role']
        st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
        st.session_state.page = 'home'  
        st.rerun()
    else:
        st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")

def logout():
    """Handles user logout."""
    st.session_state.authenticated = False
    st.session_state.username = None
    st.session_state.role = None
    st.session_state.page = 'login'
    st.info("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    st.rerun()

# --- Helper Functions ---
def get_student_by_id(student_id):
    """Get student by ID."""
    return next((s for s in st.session_state.data['students'] if s['id'] == student_id), None)

def get_direction_by_id(direction_id):
    """Get direction by ID."""
    return next((d for d in st.session_state.data['directions'] if d['id'] == direction_id), None)

def get_teacher_by_id(teacher_id):
    """Get teacher by ID."""
    return next((t for t in st.session_state.data['teachers'] if t['id'] == teacher_id), None)

def get_parent_by_id(parent_id):
    """Get parent by ID."""
    return next((p for p in st.session_state.data['parents'] if p['id'] == parent_id), None)

def get_students_by_direction(direction_name):
    """Get students attending a specific direction."""
    return [s for s in st.session_state.data['students'] if direction_name in s['directions']]

def get_schedule_by_day(day):
    """Get schedule entries for a specific day."""
    return [s for s in st.session_state.data['schedule'] if s['day'] == day]

def calculate_age(birth_date):
    """Calculate age from birth date."""
    today = date.today()
    return today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))

def suggest_directions(age, gender=None):
    """Suggest directions based on age and optional gender."""
    suitable = []
    for direction in st.session_state.data['directions']:
        min_age = direction.get('min_age', 0)
        max_age = direction.get('max_age', 18)
        if min_age <= age <= max_age:
            if not gender or not direction.get('gender') or direction.get('gender') == gender:
                suitable.append(direction)
    return suitable

# --- Page Content Functions ---
def show_home_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±–ª–æ–∂–∫–æ–π, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏."""
    st.header("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    
    # --- –û–±–ª–æ–∂–∫–∞ —Ü–µ–Ω—Ç—Ä–∞ ---
    st.subheader("üèûÔ∏è –û–±–ª–æ–∂–∫–∞ —Ü–µ–Ω—Ç—Ä–∞")
    cover_folder = os.path.join(MEDIA_FOLDER, "covers")
    os.makedirs(cover_folder, exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –æ–±–ª–æ–∂–∫–∏
    with st.expander("–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫—É"):
        uploaded_cover = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É", type=["jpg", "jpeg", "png"])
        if uploaded_cover:
            cover_path = os.path.join(cover_folder, "current_cover.jpg")
            with open(cover_path, "wb") as f:
                f.write(uploaded_cover.getbuffer())
            st.success("–û–±–ª–æ–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ–±–ª–æ–∂–∫–∏
    cover_path = os.path.join(cover_folder, "current_cover.jpg")
    if os.path.exists(cover_path):
        st.image(cover_path, use_column_width=True)
    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–ª–æ–∂–∫—É —Ü–µ–Ω—Ç—Ä–∞")
    
    # --- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ---
    st.subheader("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    schedule_by_day = defaultdict(list)
    for lesson in st.session_state.data['schedule']:
        schedule_by_day[lesson['day']].append(lesson)
    
    days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º
    for day in days_order:
        if day in schedule_by_day:
            with st.expander(f"{day}", expanded=True):
                lessons = schedule_by_day[day]
                lessons.sort(key=lambda x: x['start_time'])
                
                for lesson in lessons:
                    students_count = len([s for s in st.session_state.data['students'] 
                                       if lesson['direction'] in s['directions']])
                    st.write(f"‚è∞ {lesson['start_time']}-{lesson['end_time']}: "
                            f"**{lesson['direction']}** (–ø—Ä–µ–ø. {lesson['teacher']}) "
                            f"üë• {students_count} —É—á–µ–Ω–∏–∫–æ–≤")
    
    # --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π WhatsApp ---
    st.subheader("üí¨ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π WhatsApp")
    
    selected_day = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è", days_order)
    sticker_options = ["ü™ª", "üå∏", "üåº", "üå∫", "üå∑", "üíê", "üåπ", "üåª", "üåû", "üåà"]
    selected_sticker = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–∫–µ—Ä", sticker_options)
    
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"):
        lessons_today = [l for l in st.session_state.data['schedule'] if l['day'] == selected_day]
        if lessons_today:
            message = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!{selected_sticker}\n–ü—Ä–∏–≥–ª–∞—à–∞–µ–º —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è:\n"
            
            lessons_today.sort(key=lambda x: x['start_time'])
            for lesson in lessons_today:
                age_info = next((d['min_age'] for d in st.session_state.data['directions'] 
                               if d['name'] == lesson['direction']), None)
                age_text = f" (—Å {age_info} –ª–µ—Ç)" if age_info else ""
                message += f"{lesson['start_time']} - {lesson['direction']}{age_text}\n"
            
            st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WhatsApp", message, height=200)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            st.markdown(f"""
            <a href="https://wa.me/?text={message.replace('\n', '%0A')}" target="_blank">
                <button style="background-color:#25D366;color:white;border:none;padding:10px 20px;border-radius:5px;">
                    –û—Ç–∫—Ä—ã—Ç—å –≤ WhatsApp
                </button>
            </a>
            """, unsafe_allow_html=True)
        else:
            st.warning("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π")
    
    # --- –ù–æ–≤–æ—Å—Ç–Ω–∞—è –ª–µ–Ω—Ç–∞ ---
    st.subheader("üì∞ –ù–æ–≤–æ—Å—Ç–Ω–∞—è –ª–µ–Ω—Ç–∞")
    news_folder = os.path.join(MEDIA_FOLDER, "news")
    os.makedirs(news_folder, exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    with st.expander("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"):
        with st.form("news_form"):
            news_text = st.text_area("–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏")
            news_media = st.file_uploader("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–¥–æ–∫—É–º–µ–Ω—Ç", type=["jpg", "jpeg", "png", "pdf"])
            submitted = st.form_submit_button("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
            
            if submitted and news_text:
                news_id = str(uuid.uuid4())
                news_data = {
                    "id": news_id,
                    "text": news_text,
                    "date": str(date.today()),
                    "author": st.session_state.username
                }
                
                if news_media:
                    ext = os.path.splitext(news_media.name)[1]
                    media_path = os.path.join(news_folder, f"{news_id}{ext}")
                    with open(media_path, "wb") as f:
                        f.write(news_media.getbuffer())
                    news_data["media"] = f"{news_id}{ext}"
                
                if "news" not in st.session_state.data:
                    st.session_state.data["news"] = []
                
                st.session_state.data["news"].insert(0, news_data)
                save_data(st.session_state.data)
                st.success("–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    if "news" in st.session_state.data and st.session_state.data["news"]:
        for news in st.session_state.data["news"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
            with st.container(border=True):
                st.write(f"**{news['date']}** (–∞–≤—Ç–æ—Ä: {news.get('author', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')})")
                st.write(news['text'])
                
                if "media" in news:
                    media_path = os.path.join(news_folder, news["media"])
                    if os.path.exists(media_path):
                        if news["media"].lower().endswith(('.png', '.jpg', '.jpeg')):
                            st.image(media_path, use_column_width=True)
                        elif news["media"].lower().endswith('.pdf'):
                            with open(media_path, "rb") as f:
                                st.download_button(
                                    label="üìÑ –°–∫–∞—á–∞—Ç—å PDF",
                                    data=f,
                                    file_name=news["media"],
                                    mime="application/pdf"
                                )
                
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_news_{news['id']}"):
                    st.session_state.data["news"] = [n for n in st.session_state.data["news"] if n['id'] != news['id']]
                    if "media" in news:
                        media_path = os.path.join(news_folder, news["media"])
                        if os.path.exists(media_path):
                            os.remove(media_path)
                    save_data(st.session_state.data)
                    st.success("–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!")
                    st.rerun()
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
def show_directions_page():
    """Page to manage courses and directions."""
    st.header("üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
    
    # Add new direction form
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", expanded=False):
        with st.form("new_direction_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1:
                direction_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è*", key="new_direction_name")
                description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", key="new_direction_description")
                cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (—Ä—É–±)*", min_value=0.0, step=1.0, value=3000.0)
            with col2:
                min_age = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç", min_value=0, max_value=18, value=3)
                max_age = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç", min_value=0, max_value=18, value=12)
                gender = st.selectbox("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–ª", ["–õ—é–±–æ–π", "–ú–∞–ª—å—á–∏–∫", "–î–µ–≤–æ—á–∫–∞"])
                trial_cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è", min_value=0.0, step=1.0, value=500.0)
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
            if submitted:
                if direction_name:
                    new_direction = {
                        'id': str(uuid.uuid4()),
                        'name': direction_name,
                        'description': description,
                        'cost': cost,
                        'trial_cost': trial_cost,
                        'min_age': min_age,
                        'max_age': max_age,
                        'gender': gender if gender != "–õ—é–±–æ–π" else None
                    }
                    st.session_state.data['directions'].append(new_direction)
                    save_data(st.session_state.data)
                    st.success(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{direction_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                    st.rerun()
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)")

    st.subheader("üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    view_mode = st.radio("–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", ["–¢–∞–±–ª–∏—Ü–∞", "–ö–∞—Ä—Ç–æ—á–∫–∏"], horizontal=True)
    
    if st.session_state.data['directions']:
        if view_mode == "–¢–∞–±–ª–∏—Ü–∞":
            # Table view with data editor
            df_directions = pd.DataFrame(st.session_state.data['directions'])
            df_directions = df_directions.drop(columns=['id'], errors='ignore')
            edited_df = st.data_editor(df_directions, num_rows='dynamic', use_container_width=True)
            
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                st.session_state.data['directions'] = edited_df.to_dict('records')
                save_data(st.session_state.data)
                st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                st.rerun()
        
        else:  # Card view
            cols = st.columns(3)
            for i, d in enumerate(st.session_state.data['directions']):
                with cols[i % 3]:
                    with st.container(border=True):
                        st.subheader(d['name'])
                        st.write(f"**–í–æ–∑—Ä–∞—Å—Ç:** {d.get('min_age', '?')}-{d.get('max_age', '?')} –ª–µ—Ç")
                        st.write(f"**–ê–±–æ–Ω–µ–º–µ–Ω—Ç:** {d['cost']} —Ä—É–±.")
                        st.write(f"**–ü—Ä–æ–±–Ω–æ–µ:** {d.get('trial_cost', '?')} —Ä—É–±.")
                        
                        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ"):
                            st.write(d['description'])
                            st.write(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–ª:** {d.get('gender', '–õ—é–±–æ–π')}")
                            
                            # Students attending this direction
                            students = get_students_by_direction(d['name'])
                            if students:
                                st.write(f"**–£—á–µ–Ω–∏–∫–æ–≤:** {len(students)}")
                                if st.button("–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤", key=f"students_{d['id']}"):
                                    st.session_state.page = 'students'
                                    st.session_state.filter_direction = d['name']
                                    st.rerun()
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.button("‚úèÔ∏è –†–µ–¥.", key=f"edit_dir_{d['id']}"):
                                st.session_state.edit_direction_id = d['id']
                                st.rerun()
                        with col2:
                            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"del_dir_{d['id']}"):
                                st.session_state.data['directions'] = [item for item in st.session_state.data['directions'] if item['id'] != d['id']]
                                save_data(st.session_state.data)
                                st.success("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
                                st.rerun()
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.")

    if st.session_state.edit_direction_id:
        direction = get_direction_by_id(st.session_state.edit_direction_id)
        if direction:
            with st.form("edit_direction_form"):
                st.subheader(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {direction['name']}")
                new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", value=direction['name'])
                new_desc = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", value=direction.get('description', ''))
                new_cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å", value=direction['cost'])
                
                if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                    direction['name'] = new_name
                    direction['description'] = new_desc
                    direction['cost'] = new_cost
                    save_data(st.session_state.data)
                    st.session_state.edit_direction_id = None
                    st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    st.rerun()
                
                if st.form_submit_button("–û—Ç–º–µ–Ω–∞"):
                    st.session_state.edit_direction_id = None
                    st.rerun()

def show_students_page():
    """Page to manage students and payments."""
    st.header("üë¶üëß –£—á–µ–Ω–∏–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã")
    
    # Filter students by direction if set
    if hasattr(st.session_state, 'filter_direction'):
        filtered_students = [s for s in st.session_state.data['students'] if st.session_state.filter_direction in s['directions']]
        st.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã —É—á–µ–Ω–∏–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {st.session_state.filter_direction}")
        if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤"):
            del st.session_state.filter_direction
            st.rerun()
    else:
        filtered_students = st.session_state.data['students']

    # Form to add a new student
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞", expanded=False):
        with st.form("new_student_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1:
                student_name = st.text_input("–§–ò–û —É—á–µ–Ω–∏–∫–∞*")
                dob = st.date_input("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*", value=date.today(), max_value=date.today())
                gender = st.selectbox("–ü–æ–ª", ["–ú–∞–ª—å—á–∏–∫", "–î–µ–≤–æ—á–∫–∞"])
                notes = st.text_area("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            with col2:
                # Parent selection
                parent_options = {p['id']: f"{p['name']} ({p.get('phone', '–Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')})" 
                                 for p in st.session_state.data['parents']}
                selected_parent_id = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—è", 
                    options=[None] + list(parent_options.keys()), 
                    format_func=lambda x: parent_options.get(x, "–ù–æ–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å")
                )
                
                # New parent fields
                new_parent_name = st.text_input("–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–æ–≤—ã–π)")
                new_parent_phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è")
                
                # Directions selection
                available_directions = [d['name'] for d in st.session_state.data['directions']]
                selected_directions = st.multiselect("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", available_directions)
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
            if submitted:
                if student_name and dob:
                    parent_id = selected_parent_id
                    if (new_parent_name and new_parent_phone) or not parent_id:
                        new_parent = {
                            'id': str(uuid.uuid4()),
                            'name': new_parent_name if new_parent_name else f"–†–æ–¥–∏—Ç–µ–ª—å {student_name}",
                            'phone': new_parent_phone,
                            'children_ids': []
                        }
                        st.session_state.data['parents'].append(new_parent)
                        parent_id = new_parent['id']
                    
                    new_student = {
                        'id': str(uuid.uuid4()),
                        'name': student_name,
                        'dob': str(dob),
                        'gender': gender,
                        'parent_id': parent_id,
                        'directions': selected_directions,
                        'notes': notes,
                        'registration_date': str(date.today())
                    }
                    st.session_state.data['students'].append(new_student)
                    
                    # Link child to parent
                    for p in st.session_state.data['parents']:
                        if p['id'] == parent_id:
                            p['children_ids'].append(new_student['id'])
                            break
                    
                    save_data(st.session_state.data)
                    st.success(f"–£—á–µ–Ω–∏–∫ '{student_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–§–ò–û –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è)")

    st.subheader("üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤")
    if filtered_students:
        # Create DataFrame for display
        df_students = pd.DataFrame(filtered_students)
        
        # Map parent_id to parent_name for display
        parent_id_to_name = {p['id']: p['name'] for p in st.session_state.data['parents']}
        df_students['parent'] = df_students['parent_id'].map(parent_id_to_name)
        
        # Calculate ages
        df_students['age'] = pd.to_datetime(df_students['dob']).apply(
            lambda x: calculate_age(x.date()))
        
        # Select columns to display
        display_cols = ['name', 'age', 'gender', 'parent', 'directions', 'notes']
        df_display = df_students[display_cols].copy()
        df_display['directions'] = df_display['directions'].apply(lambda x: ', '.join(x))
        
        # Data editor
        edited_df = st.data_editor(
            df_display,
            num_rows="dynamic",
            use_container_width=True,
            column_config={
                "name": "–§–ò–û",
                "age": "–í–æ–∑—Ä–∞—Å—Ç",
                "gender": "–ü–æ–ª",
                "parent": "–†–æ–¥–∏—Ç–µ–ª—å",
                "directions": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "notes": "–ó–∞–º–µ—Ç–∫–∏"
            }
        )
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤"):
            # Update student data from edited DataFrame
            for idx, row in edited_df.iterrows():
                student_id = filtered_students[idx]['id']
                for s in st.session_state.data['students']:
                    if s['id'] == student_id:
                        s['name'] = row['name']
                        s['gender'] = row['gender']
                        s['notes'] = row['notes']
                        # Directions need special handling as they're a list
                        if isinstance(row['directions'], str):
                            s['directions'] = [d.strip() for d in row['directions'].split(',') if d.strip()]
                        break
            
            save_data(st.session_state.data)
            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
    else:
        st.info("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    # Payments section
    st.subheader("üí≥ –û–ø–ª–∞—Ç—ã")
    if filtered_students:
        student_options = {s['id']: s['name'] for s in filtered_students}
        selected_student_id = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã",
            options=list(student_options.keys()),
            format_func=lambda x: student_options[x]
        )
        
        with st.form("new_payment_form"):
            col1, col2 = st.columns(2)
            with col1:
                payment_date = st.date_input("–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã", value=date.today())
                amount = st.number_input("–°—É–º–º–∞ (—Ä—É–±)", min_value=0.0, step=100.0)
            with col2:
                direction = st.selectbox(
                    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                    options=[d['name'] for d in st.session_state.data['directions']]
                )
                payment_type = st.selectbox(
                    "–¢–∏–ø –æ–ø–ª–∞—Ç—ã",
                    ["–ê–±–æ–Ω–µ–º–µ–Ω—Ç", "–ü—Ä–æ–±–Ω–æ–µ", "–†–∞–∑–æ–≤–æ–µ"]
                )
            
            notes = st.text_input("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ")
            
            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É"):
                new_payment = {
                    'id': str(uuid.uuid4()),
                    'student_id': selected_student_id,
                    'date': str(payment_date),
                    'amount': amount,
                    'direction': direction,
                    'type': payment_type,
                    'notes': notes
                }
                st.session_state.data['payments'].append(new_payment)
                save_data(st.session_state.data)
                st.success("–û–ø–ª–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                st.rerun()
    
    # Display payments for selected students
    if filtered_students:
        payments = [p for p in st.session_state.data['payments'] 
                   if p['student_id'] in [s['id'] for s in filtered_students]]
        
        if payments:
            df_payments = pd.DataFrame(payments)
            df_payments['student'] = df_payments['student_id'].apply(
                lambda x: next(s['name'] for s in st.session_state.data['students'] if s['id'] == x)
            )
            st.dataframe(
                df_payments[['student', 'date', 'amount', 'direction', 'type', 'notes']],
                use_container_width=True
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–ª–∞—Ç–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.")

def show_teachers_page():
    """Page to manage teachers."""
    st.header("üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
    
    # Form to add a new teacher
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", expanded=False):
        with st.form("new_teacher_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1:
                teacher_name = st.text_input("–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è*")
                teacher_phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
                teacher_email = st.text_input("Email")
            with col2:
                teacher_directions = st.multiselect(
                    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                    [d['name'] for d in st.session_state.data['directions']]
                )
                teacher_notes = st.text_area("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
            if submitted:
                if teacher_name:
                    new_teacher = {
                        'id': str(uuid.uuid4()),
                        'name': teacher_name,
                        'phone': teacher_phone,
                        'email': teacher_email,
                        'directions': teacher_directions,
                        'notes': teacher_notes,
                        'hire_date': str(date.today())
                    }
                    st.session_state.data['teachers'].append(new_teacher)
                    save_data(st.session_state.data)
                    st.success(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{teacher_name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
                    st.rerun()
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")

    st.subheader("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
    if st.session_state.data['teachers']:
        df_teachers = pd.DataFrame(st.session_state.data['teachers'])
        
        # Convert directions list to string for display
        df_teachers['directions'] = df_teachers['directions'].apply(lambda x: ', '.join(x))
        
        # Select columns to display
        display_cols = ['name', 'phone', 'email', 'directions', 'notes']
        df_display = df_teachers[display_cols].copy()
        
        # Data editor
        edited_df = st.data_editor(
            df_display,
            num_rows="dynamic",
            use_container_width=True,
            column_config={
                "name": "–§–ò–û",
                "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "email": "Email",
                "directions": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "notes": "–ó–∞–º–µ—Ç–∫–∏"
            }
        )
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            # Update teacher data from edited DataFrame
            for idx, row in edited_df.iterrows():
                teacher_id = st.session_state.data['teachers'][idx]['id']
                for t in st.session_state.data['teachers']:
                    if t['id'] == teacher_id:
                        t['name'] = row['name']
                        t['phone'] = row['phone']
                        t['email'] = row['email']
                        t['notes'] = row['notes']
                        # Directions need special handling as they're a list
                        if isinstance(row['directions'], str):
                            t['directions'] = [d.strip() for d in row['directions'].split(',') if d.strip()]
                        break
            
            save_data(st.session_state.data)
            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")

def show_schedule_page():
    """Page for schedule management, attendance, and message generation."""
    st.header("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è")
    
    # Admin can add schedule entries
    if st.session_state.role in ['admin', 'teacher']:
        with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", expanded=False):
            with st.form("new_schedule_form"):
                col1, col2 = st.columns(2)
                with col1:
                    direction_name = st.selectbox(
                        "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*",
                        [d['name'] for d in st.session_state.data['directions']]
                    )
                    teacher = st.selectbox(
                        "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å*",
                        [t['name'] for t in st.session_state.data['teachers']]
                    )
                with col2:
                    start_time = st.time_input("–ù–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è*", value=datetime.strptime("16:00", "%H:%M").time())
                    end_time = st.time_input("–ö–æ–Ω–µ—Ü –∑–∞–Ω—è—Ç–∏—è*", value=datetime.strptime("17:00", "%H:%M").time())
                    day_of_week = st.selectbox(
                        "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏*",
                        ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                    )
                
                submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
                if submitted:
                    if direction_name and teacher and start_time and end_time and day_of_week:
                        new_schedule_entry = {
                            'id': str(uuid.uuid4()),
                            'direction': direction_name,
                            'teacher': teacher,
                            'start_time': str(start_time),
                            'end_time': str(end_time),
                            'day': day_of_week
                        }
                        st.session_state.data['schedule'].append(new_schedule_entry)
                        save_data(st.session_state.data)
                        st.success("–ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")
                        st.rerun()
                    else:
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)")

    # Calendar view for attendance
    st.subheader("üóìÔ∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π")
    selected_date = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", value=st.session_state.selected_date)
    st.session_state.selected_date = selected_date
    day_of_week = selected_date.strftime("%A")
    
    # Translate day names to Russian
    day_translation = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    russian_day = day_translation.get(day_of_week, day_of_week)
    
    # Get schedule for this day
    day_schedule = [s for s in st.session_state.data['schedule'] if s['day'] == russian_day]
    
    if day_schedule:
        st.write(f"–ó–∞–Ω—è—Ç–∏—è –Ω–∞ {selected_date.strftime('%d.%m.%Y')} ({russian_day}):")
        
        for lesson in day_schedule:
            with st.expander(f"{lesson['direction']} ({lesson['start_time']}-{lesson['end_time']}, {lesson['teacher']})"):
                # Get students for this direction
                students = [s for s in st.session_state.data['students'] 
                           if lesson['direction'] in s['directions']]
                
                if students:
                    # Check if attendance record exists for this date and lesson
                    date_key = selected_date.strftime("%Y-%m-%d")
                    lesson_key = lesson['id']
                    
                    if date_key not in st.session_state.data['attendance']:
                        st.session_state.data['attendance'][date_key] = {}
                    
                    if lesson_key not in st.session_state.data['attendance'][date_key]:
                        st.session_state.data['attendance'][date_key][lesson_key] = {}
                    
                    attendance_records = st.session_state.data['attendance'][date_key][lesson_key]
                    
                    # Attendance table
                    st.write("–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è:")
                    cols = st.columns([3, 1, 1, 2])
                    cols[0].write("**–£—á–µ–Ω–∏–∫**")
                    cols[1].write("**–ü—Ä–∏—Å—É—Ç.**")
                    cols[2].write("**–û–ø–ª–∞—Ç–∞**")
                    cols[3].write("**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ**")
                    
                    for student in students:
                        student_id = student['id']
                        student_name = student['name']
                        
                        # Get current attendance status
                        current_status = attendance_records.get(student_id, {'present': False, 'paid': False, 'note': ''})
                        
                        cols = st.columns([3, 1, 1, 2])
                        cols[0].write(student_name)
                        
                        # Present checkbox
                        present = cols[1].checkbox(
                            "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª",
                            value=current_status['present'],
                            key=f"present_{lesson_key}_{student_id}",
                            label_visibility="collapsed"
                        )
                        
                        # Paid checkbox
                        paid = cols[2].checkbox(
                            "–û–ø–ª–∞—á–µ–Ω–æ",
                            value=current_status['paid'],
                            key=f"paid_{lesson_key}_{student_id}",
                            label_visibility="collapsed"
                        )
                        
                        # Note field
                        note = cols[3].text_input(
                            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
                            value=current_status.get('note', ''),
                            key=f"note_{lesson_key}_{student_id}",
                            label_visibility="collapsed"
                        )
                        
                        # Update attendance record
                        attendance_records[student_id] = {
                            'present': present,
                            'paid': paid,
                            'note': note
                        }
                    
                    # Save attendance button
                    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è", key=f"save_att_{lesson_key}"):
                        save_data(st.session_state.data)
                        st.success("–î–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        st.rerun()
                else:
                    st.info("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
    else:
        st.info(f"–ù–∞ {russian_day} –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.")

def show_materials_page():
    """Page to manage materials and purchases."""
    st.header("üõçÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–∫—É–ø–∫–∏")
    
    # Add new material form
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª/–∑–∞–∫—É–ø–∫—É", expanded=False):
        with st.form("new_material_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1:
                material_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞*")
                cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±)*", min_value=0.0, step=1.0)
                direction = st.selectbox(
                    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                    [d['name'] for d in st.session_state.data['directions']]
                )
            with col2:
                purchase_date = st.date_input("–î–∞—Ç–∞ –∑–∞–∫—É–ø–∫–∏*", value=date.today())
                quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, value=1)
                supplier = st.text_input("–ü–æ—Å—Ç–∞–≤—â–∏–∫")
                link = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑")
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
            if submitted:
                if material_name and cost and purchase_date:
                    new_material = {
                        'id': str(uuid.uuid4()),
                        'name': material_name,
                        'cost': cost,
                        'quantity': quantity,
                        'total_cost': cost * quantity,
                        'direction': direction,
                        'date': str(purchase_date),
                        'supplier': supplier,
                        'link': link
                    }
                    st.session_state.data['materials'].append(new_material)
                    save_data(st.session_state.data)
                    st.success("–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)")

    st.subheader("üìã –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    if st.session_state.data['materials']:
        df_materials = pd.DataFrame(st.session_state.data['materials'])
        
        # Convert date strings to datetime for sorting
        df_materials['date'] = pd.to_datetime(df_materials['date'])
        
        # Sort by date descending
        df_materials = df_materials.sort_values('date', ascending=False)
        
        # Select columns to display
        display_cols = ['name', 'direction', 'quantity', 'cost', 'total_cost', 'date', 'supplier']
        df_display = df_materials[display_cols].copy()
        
        # Data editor
        edited_df = st.data_editor(
            df_display,
            num_rows="dynamic",
            use_container_width=True,
            column_config={
                "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                "direction": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                "quantity": "–ö–æ–ª-–≤–æ",
                "cost": "–¶–µ–Ω–∞",
                "total_cost": "–°—É–º–º–∞",
                "date": "–î–∞—Ç–∞",
                "supplier": "–ü–æ—Å—Ç–∞–≤—â–∏–∫"
            }
        )
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            # Update material data from edited DataFrame
            for idx, row in edited_df.iterrows():
                material_id = st.session_state.data['materials'][idx]['id']
                for m in st.session_state.data['materials']:
                    if m['id'] == material_id:
                        m['name'] = row['name']
                        m['direction'] = row['direction']
                        m['quantity'] = row['quantity']
                        m['cost'] = row['cost']
                        m['total_cost'] = row['total_cost']
                        m['date'] = str(row['date'].date())
                        m['supplier'] = row['supplier']
                        break
            
            save_data(st.session_state.data)
            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")

def show_kanban_board():
    """Page to manage kanban tasks."""
    st.header("üìå –ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞")
    
    # Add new task form
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É", expanded=False):
        with st.form("new_task_form", clear_on_submit=True):
            task_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏*")
            task_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
            task_priority = st.selectbox("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"])
            task_deadline = st.date_input("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            task_assignee = st.selectbox(
                "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
                [None] + [t['name'] for t in st.session_state.data['teachers']]
            )
            
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
            if submitted:
                if task_title:
                    new_task = {
                        'id': str(uuid.uuid4()),
                        'title': task_title,
                        'description': task_description,
                        'priority': task_priority,
                        'deadline': str(task_deadline) if task_deadline else None,
                        'assignee': task_assignee,
                        'created': str(date.today()),
                        'created_by': st.session_state.username
                    }
                    st.session_state.data['kanban_tasks']['ToDo'].append(new_task)
                    save_data(st.session_state.data)
                    st.success("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    st.rerun()
                else:
                    st.error("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    st.subheader("üìã –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏")
    cols = st.columns(3)
    status_map = {
        'ToDo': 'üìã –ù–µ —Å–¥–µ–ª–∞–Ω–æ',
        'InProgress': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'Done': '‚úÖ –ì–æ—Ç–æ–≤–æ'
    }
    
    for status, col in zip(['ToDo', 'InProgress', 'Done'], cols):
        with col:
            st.markdown(f"### {status_map[status]}")
            if st.session_state.data['kanban_tasks'][status]:
                for task in st.session_state.data['kanban_tasks'][status]:
                    with st.container(border=True):
                        # Task header with priority indicator
                        priority_colors = {
                            "–ù–∏–∑–∫–∏–π": "blue",
                            "–°—Ä–µ–¥–Ω–∏–π": "orange",
                            "–í—ã—Å–æ–∫–∏–π": "red"
                        }
                        st.markdown(
                            f"**{task['title']}** " 
                            f"<span style='color:{priority_colors.get(task.get('priority', '–ù–∏–∑–∫–∏–π'), 'gray')}'>"
                            f"‚¨§</span>",
                            unsafe_allow_html=True
                        )
                        
                        # Task details
                        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ"):
                            st.write(task['description'])
                            
                            if task.get('assignee'):
                                st.write(f"**–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:** {task['assignee']}")
                            
                            if task.get('deadline'):
                                deadline_date = datetime.strptime(task['deadline'], "%Y-%m-%d").date()
                                days_left = (deadline_date - date.today()).days
                                deadline_color = "red" if days_left < 0 else ("orange" if days_left < 3 else "green")
                                st.write(
                                    f"**–°—Ä–æ–∫:** <span style='color:{deadline_color}'>"
                                    f"{deadline_date.strftime('%d.%m.%Y')} ({days_left} –¥–Ω.)</span>",
                                    unsafe_allow_html=True
                                )
                            
                            st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {task.get('created')} ({task.get('created_by', '?')})")
                        
                        # Task actions
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            next_status = None
                            if status == 'ToDo':
                                if st.button("–ù–∞—á–∞—Ç—å", key=f"start_{task['id']}"):
                                    next_status = 'InProgress'
                            elif status == 'InProgress':
                                if st.button("–ó–∞–≤–µ—Ä—à–∏—Ç—å", key=f"complete_{task['id']}"):
                                    next_status = 'Done'
                            
                            if next_status:
                                st.session_state.data['kanban_tasks'][status].remove(task)
                                st.session_state.data['kanban_tasks'][next_status].append(task)
                                save_data(st.session_state.data)
                                st.rerun()
                        with col2:
                            if st.button("üóëÔ∏è", key=f"del_{task['id']}"):
                                st.session_state.data['kanban_tasks'][status].remove(task)
                                save_data(st.session_state.data)
                                st.rerun()
            else:
                st.info("–ù–µ—Ç –∑–∞–¥–∞—á")

def show_media_gallery_page():
    """Page to manage media files."""
    st.header("üñºÔ∏è –ú–µ–¥–∏–∞-–≥–∞–ª–µ—Ä–µ—è")
    
    # Create tabs for different media types
    tab_images, tab_docs, tab_videos = st.tabs(["–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "–î–æ–∫—É–º–µ–Ω—Ç—ã", "–í–∏–¥–µ–æ"])
    
    # Upload section
    with st.expander("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", expanded=False):
        with st.form("upload_media_form"):
            file_type = st.selectbox("–¢–∏–ø —Ñ–∞–π–ª–∞", ["–§–æ—Ç–æ", "–î–æ–∫—É–º–µ–Ω—Ç", "–í–∏–¥–µ–æ"])
            uploaded_files = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã",
                type=["jpg", "jpeg", "png", "gif", "pdf", "doc", "docx", "mp4", "mov"],
                accept_multiple_files=True
            )
            
            if st.form_submit_button("–ó–∞–≥—Ä—É–∑–∏—Ç—å"):
                if uploaded_files:
                    for uploaded_file in uploaded_files:
                        # Create subfolder based on file type
                        subfolder = {
                            "–§–æ—Ç–æ": "images",
                            "–î–æ–∫—É–º–µ–Ω—Ç": "documents",
                            "–í–∏–¥–µ–æ": "videos"
                        }.get(file_type, "other")
                        
                        os.makedirs(os.path.join(MEDIA_FOLDER, subfolder), exist_ok=True)
                        file_path = os.path.join(MEDIA_FOLDER, subfolder, uploaded_file.name)
                        
                        with open(file_path, "wb") as f:
                            f.write(uploaded_file.getbuffer())
                    
                    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤!")
                    st.rerun()
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª")

    # Display media by type
    with tab_images:
        st.subheader("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        image_files = []
        for root, _, files in os.walk(os.path.join(MEDIA_FOLDER, "images")):
            for file in files:
                if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):
                    image_files.append(os.path.join(root, file))
        
        if image_files:
            cols = st.columns(3)
            for i, img_path in enumerate(image_files):
                with cols[i % 3]:
                    st.image(img_path, use_column_width=True)
                    st.caption(os.path.basename(img_path))
                    if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_img_{img_path}"):
                        os.remove(img_path)
                        st.success("–§–∞–π–ª —É–¥–∞–ª–µ–Ω!")
                        st.rerun()
        else:
            st.info("–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≥–∞–ª–µ—Ä–µ–µ.")

    with tab_docs:
        st.subheader("–î–æ–∫—É–º–µ–Ω—Ç—ã")
        doc_files = []
        for root, _, files in os.walk(os.path.join(MEDIA_FOLDER, "documents")):
            for file in files:
                if file.lower().endswith(('.pdf', '.doc', '.docx')):
                    doc_files.append(os.path.join(root, file))
        
        if doc_files:
            for doc_path in doc_files:
                doc_name = os.path.basename(doc_path)
                st.download_button(
                    label=f"üìÑ {doc_name}",
                    data=open(doc_path, "rb").read(),
                    file_name=doc_name,
                    mime="application/octet-stream",
                    key=f"doc_{doc_path}"
                )
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_doc_{doc_path}"):
                    os.remove(doc_path)
                    st.success("–§–∞–π–ª —É–¥–∞–ª–µ–Ω!")
                    st.rerun()
        else:
            st.info("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≥–∞–ª–µ—Ä–µ–µ.")

    with tab_videos:
        st.subheader("–í–∏–¥–µ–æ")
        video_files = []
        for root, _, files in os.walk(os.path.join(MEDIA_FOLDER, "videos")):
            for file in files:
                if file.lower().endswith(('.mp4', '.mov')):
                    video_files.append(os.path.join(root, file))
        
        if video_files:
            for video_path in video_files:
                st.video(video_path)
                st.caption(os.path.basename(video_path))
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_vid_{video_path}"):
                    os.remove(video_path)
                    st.success("–§–∞–π–ª —É–¥–∞–ª–µ–Ω!")
                    st.rerun()
        else:
            st.info("–ù–µ—Ç –≤–∏–¥–µ–æ –≤ –≥–∞–ª–µ—Ä–µ–µ.")

def show_bulk_upload_page():
    """Page for bulk data upload via CSV."""
    st.header("üì§ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # Select data type to upload
    data_type = st.selectbox(
        "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
        ["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–£—á–µ–Ω–∏–∫–∏", "–†–æ–¥–∏—Ç–µ–ª–∏", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã","–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]
    )
    
    # Upload CSV file
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª",
        type=["csv"],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö"
    )
    
    if uploaded_file:
        # Read CSV file
        try:
            df = pd.read_csv(uploaded_file)
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            st.dataframe(df.head())
            
            # Process based on data type
            if st.button("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                try:
                    if data_type == "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è":
                        required_cols = ['name', 'cost']
                        if all(col in df.columns for col in required_cols):
                            new_directions = []
                            for _, row in df.iterrows():
                                new_direction = {
                                    'id': str(uuid.uuid4()),
                                    'name': row['name'],
                                    'description': row.get('description', ''),
                                    'cost': float(row['cost']),
                                    'trial_cost': float(row.get('trial_cost', row['cost'] * 0.2)),
                                    'min_age': int(row.get('min_age', 3)),
                                    'max_age': int(row.get('max_age', 12)),
                                    'gender': row.get('gender', None)
                                }
                                new_directions.append(new_direction)
                            
                            st.session_state.data['directions'].extend(new_directions)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π!")
                    
                    elif data_type == "–£—á–µ–Ω–∏–∫–∏":
                        required_cols = ['name', 'dob']
                        if all(col in df.columns for col in required_cols):
                            new_students = []
                            for _, row in df.iterrows():
                                new_student = {
                                    'id': str(uuid.uuid4()),
                                    'name': row['name'],
                                    'dob': row['dob'],
                                    'gender': row.get('gender', '–ú–∞–ª—å—á–∏–∫'),
                                    'parent_id': None,  # Will need to handle parents separately
                                    'directions': row.get('directions', '').split(',') if pd.notna(row.get('directions')) else [],
                                    'notes': row.get('notes', ''),
                                    'registration_date': str(date.today())
                                }
                                new_students.append(new_student)
                            
                            st.session_state.data['students'].extend(new_students)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_students)} —É—á–µ–Ω–∏–∫–æ–≤!")
                    
                    elif data_type == "–†–æ–¥–∏—Ç–µ–ª–∏":
                        required_cols = ['name', 'phone']
                        if all(col in df.columns for col in required_cols):
                            new_parents = []
                            for _, row in df.iterrows():
                                new_parent = {
                                    'id': str(uuid.uuid4()),
                                    'name': row['name'],
                                    'phone': str(row['phone']),
                                    'email': row.get('email', ''),
                                    'children_ids': []
                                }
                                new_parents.append(new_parent)
                            
                            st.session_state.data['parents'].extend(new_parents)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_parents)} —Ä–æ–¥–∏—Ç–µ–ª–µ–π!")
                    
                    elif data_type == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏":
                        required_cols = ['name']
                        if all(col in df.columns for col in required_cols):
                            new_teachers = []
                            for _, row in df.iterrows():
                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π - —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
                                raw_directions = row.get('directions', '')
                                if pd.notna(raw_directions):
                                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –∑–∞–ø—è—Ç—ã–º
                                    raw_dir_list = [d.strip() for d in raw_directions.split(',')]
                                    valid_directions = []
                                    
                                    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
                                    for dir_name in raw_dir_list:
                                        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                                        exact_match = next((d for d in st.session_state.data['directions'] 
                                                          if d['name'].lower() == dir_name.lower()), None)
                                        if exact_match:
                                            valid_directions.append(exact_match['name'])
                                        else:
                                            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
                                            partial_match = next((d for d in st.session_state.data['directions'] 
                                                                if dir_name.lower() in d['name'].lower()), None)
                                            if partial_match:
                                                valid_directions.append(partial_match['name'])
                                    
                                    directions = list(set(valid_directions))  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                                else:
                                    directions = []
                                
                                new_teacher = {
                                    'id': str(uuid.uuid4()),
                                    'name': row['name'],
                                    'phone': str(row.get('phone', '')),
                                    'email': row.get('email', ''),
                                    'directions': directions,
                                    'notes': row.get('notes', ''),
                                    'hire_date': str(date.today())
                                }
                                new_teachers.append(new_teacher)
                            
                            st.session_state.data['teachers'].extend(new_teachers)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_teachers)} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π!")
                            
                    
                    elif data_type == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
                        required_cols = ['name', 'cost', 'direction']
                        if all(col in df.columns for col in required_cols):
                            new_materials = []
                            for _, row in df.iterrows():
                                new_material = {
                                    'id': str(uuid.uuid4()),
                                    'name': row['name'],
                                    'cost': float(row['cost']),
                                    'quantity': int(row.get('quantity', 1)),
                                    'total_cost': float(row['cost']) * int(row.get('quantity', 1)),
                                    'direction': row['direction'],
                                    'date': str(date.today()),
                                    'supplier': row.get('supplier', ''),
                                    'link': row.get('link', '')
                                }
                                new_materials.append(new_material)
                            
                            st.session_state.data['materials'].extend(new_materials)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!")
                    # --- –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –†–ê–°–ü–ò–°–ê–ù–ò–Ø ---
                    elif data_type == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                        required_cols = ['direction', 'teacher', 'start_time', 'end_time', 'day']
                        if all(col in df.columns for col in required_cols):
                            new_schedule_entries = []
                            for _, row in df.iterrows():
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
                                direction_exists = any(d['name'] == row['direction'] for d in st.session_state.data['directions'])
                                teacher_exists = any(t['name'] == row['teacher'] for t in st.session_state.data['teachers'])

                                if not direction_exists:
                                    st.warning(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{row['direction']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–Ω—è—Ç–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ, –Ω–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é.")
                                if not teacher_exists:
                                    st.warning(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{row['teacher']}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–Ω—è—Ç–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ, –Ω–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
                                
                                new_schedule_entry = {
                                    'id': str(uuid.uuid4()),
                                    'direction': row['direction'],
                                    'teacher': row['teacher'],
                                    'start_time': str(row['start_time']), # –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
                                    'end_time': str(row['end_time']),     # –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
                                    'day': row['day'] # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
                                }
                                new_schedule_entries.append(new_schedule_entry)
                            
                            st.session_state.data['schedule'].extend(new_schedule_entries)
                            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_schedule_entries)} –∑–∞–Ω—è—Ç–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")
                    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---
                    
                    save_data(st.session_state.data)
                    st.rerun()
                
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

def show_payments_report():
    """Page for payments report."""
    st.header("üìä –û—Ç—á–µ—Ç –ø–æ –æ–ø–ª–∞—Ç–∞–º")
    
    if st.session_state.data['payments']:
        df_payments = pd.DataFrame(st.session_state.data['payments'])
        
        # Convert date strings to datetime
        df_payments['date'] = pd.to_datetime(df_payments['date'])
        
        # Add student names
        student_id_to_name = {s['id']: s['name'] for s in st.session_state.data['students']}
        df_payments['student'] = df_payments['student_id'].map(student_id_to_name)
        
        # Date range filter
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=df_payments['date'].min().date())
        with col2:
            end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", value=df_payments['date'].max().date())
        
        # Filter by date range
        df_filtered = df_payments[
            (df_payments['date'].dt.date >= start_date) & 
            (df_payments['date'].dt.date <= end_date)
        ]
        
        if not df_filtered.empty:
            # Display filtered data
            st.dataframe(
                df_filtered[['student', 'date', 'amount', 'direction', 'type', 'notes']],
                use_container_width=True
            )
            
            # Summary statistics
            total_payments = df_filtered['amount'].sum()
            st.subheader(f"–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç: {total_payments:.2f} —Ä—É–±.")
            
            # Group by direction and type
            st.subheader("–û–ø–ª–∞—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º")
            payments_by_direction = df_filtered.groupby('direction')['amount'].sum().reset_index()
            st.bar_chart(payments_by_direction.set_index('direction'))
            
            st.subheader("–û–ø–ª–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º")
            payments_by_type = df_filtered.groupby('type')['amount'].sum().reset_index()
            st.bar_chart(payments_by_type.set_index('type'))
            
            # Export button
            csv = df_filtered.to_csv(index=False).encode('utf-8')
            st.download_button(
                "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                data=csv,
                file_name=f"payments_report_{start_date}_{end_date}.csv",
                mime="text/csv"
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–ª–∞—Ç–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–ª–∞—Ç–∞–º.")

def show_materials_report():
    """Page for materials report."""
    st.header("üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º")
    
    if st.session_state.data['materials']:
        df_materials = pd.DataFrame(st.session_state.data['materials'])
        
        # Convert date strings to datetime
        df_materials['date'] = pd.to_datetime(df_materials['date'])
        
        # Date range filter
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=df_materials['date'].min().date())
        with col2:
            end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", value=df_materials['date'].max().date())
        
        # Filter by date range
        df_filtered = df_materials[
            (df_materials['date'].dt.date >= start_date) & 
            (df_materials['date'].dt.date <= end_date)
        ]
        
        if not df_filtered.empty:
            # Display filtered data
            st.dataframe(
                df_filtered[['name', 'direction', 'quantity', 'cost', 'total_cost', 'date', 'supplier']],
                use_container_width=True
            )
            
            # Summary statistics
            total_cost = df_filtered['total_cost'].sum()
            st.subheader(f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ç—Ä–∞—Ç: {total_cost:.2f} —Ä—É–±.")
            
            # Group by direction
            st.subheader("–ó–∞—Ç—Ä–∞—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º")
            materials_by_direction = df_filtered.groupby('direction')['total_cost'].sum().reset_index()
            st.bar_chart(materials_by_direction.set_index('direction'))
            
            # Export button
            csv = df_filtered.to_csv(index=False).encode('utf-8')
            st.download_button(
                "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                data=csv,
                file_name=f"materials_report_{start_date}_{end_date}.csv",
                mime="text/csv"
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫—É–ø–∫–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫—É–ø–∫–∞–º.")

def show_reception_helper():
    """Page for reception helper to suggest directions."""
    st.header("üëã –ü–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å–µ–ø—à–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    direction_categories = {
        "–Ø–∑—ã–∫–∏": ["–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫"],
        "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ": [
            "–°—Ç—É–¥–∏—è –∂–∏–≤–æ–ø–∏—Å–∏ —Å 4 –ª–µ—Ç –∏ —Å 6 –ª–µ—Ç", 
            "–ì–æ–Ω—á–∞—Ä–Ω–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è —Å 5 –ª–µ—Ç",
            "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ç—É–¥–∏—è —Å 5 –ª–µ—Ç"
        ],
        "–ú—É–∑—ã–∫–∞": [
            "–í–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç—É–¥–∏—è —Å 5 –ª–µ—Ç",
            "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∞–Ω—Å–∞–º–±–ª—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö",
            "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –≥–∏—Ç–∞—Ä–µ"
        ],
        "–¢–∞–Ω—Ü—ã": ["–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è —Å—Ç—É–¥–∏—è —Å 4 –ª–µ—Ç"],
        "–ù–∞—É–∫–∞": [
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –æ–ø—ã—Ç–æ–≤ —Å 6 –ª–µ—Ç",
            "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"
        ],
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ": [
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ –∏ –í–ü–†", 
            "–ö—É—Ä—Å \"–ü–∏—à—É –∫—Ä–∞—Å–∏–≤–æ\"",
            "–†–µ—á–µ–≤–∞—è —Å—Ç—É–¥–∏—è \"–ì–æ–≤–æ—Ä—É—à–∞\" (5-7 –ª–µ—Ç)"
        ],
        "–õ–æ–≥–æ–ø–µ–¥–∏—è": ["–õ–æ–≥–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è"],
        "–®–∞—Ö–º–∞—Ç—ã": ["–®–∞—Ö–º–∞—Ç–Ω—ã–π –∫–ª—É–± —Å 5 –ª–µ—Ç"],
        "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ": [
            "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏",
            "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é",
            "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É"
        ]
    }
    
    with st.form("child_info_form"):
        col1, col2 = st.columns(2)
        with col1:
            child_age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞", min_value=0, max_value=18, value=5)
            gender = st.selectbox("–ü–æ–ª —Ä–µ–±–µ–Ω–∫–∞", ["–ú–∞–ª—å—á–∏–∫", "–î–µ–≤–æ—á–∫–∞", "–ù–µ –≤–∞–∂–Ω–æ"])
        with col2:
            interests = st.multiselect(
                "–ò–Ω—Ç–µ—Ä–µ—Å—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                list(direction_categories.keys())
            )
        
        if st.form_submit_button("–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"):
            # –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –ø–æ–ª—É
            suitable_directions = suggest_directions(child_age, gender if gender != "–ù–µ –≤–∞–∂–Ω–æ" else None)
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if interests:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                interested_directions = []
                for interest in interests:
                    interested_directions.extend(direction_categories.get(interest, []))
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                suitable_directions = [
                    d for d in suitable_directions 
                    if d['name'] in interested_directions
                ]
            
            if suitable_directions:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(suitable_directions)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                categorized = defaultdict(list)
                for direction in suitable_directions:
                    for category, dirs in direction_categories.items():
                        if direction['name'] in dirs:
                            categorized[category].append(direction)
                            break
                    else:
                        categorized["–î—Ä—É–≥–∏–µ"].append(direction)
                
                # –í—ã–≤–æ–¥–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                for category, directions in categorized.items():
                    with st.expander(f"**{category}** ({len(directions)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)"):
                        cols = st.columns(2)
                        for i, direction in enumerate(directions):
                            with cols[i % 2]:
                                with st.container(border=True):
                                    st.subheader(direction['name'])
                                    st.write(f"**–í–æ–∑—Ä–∞—Å—Ç:** {direction.get('min_age', '?')}-{direction.get('max_age', '?')} –ª–µ—Ç")
                                    st.write(f"**–ê–±–æ–Ω–µ–º–µ–Ω—Ç:** {direction['cost']} —Ä—É–±.")
                                    st.write(f"**–ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ:** {direction.get('trial_cost', '?')} —Ä—É–±.")
                                    
                                    if direction.get('description'):
                                        st.caption(direction['description'])
            else:
                st.info("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
# --- Main App Title and Navigation ---
st.title("üè´ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç—Å–∫–∏–º —Ü–µ–Ω—Ç—Ä–æ–º")

# If not authenticated, show login page
if not st.session_state.authenticated:
    st.header("üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    with st.form("login_form"):
        username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")
        if submitted:
            login(username, password)

# If authenticated, show the main app
else:
    # Sidebar navigation menu
    st.sidebar.title("üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    if st.session_state.role == 'admin':
        st.sidebar.button("üè† –ì–ª–∞–≤–Ω–∞—è", on_click=lambda: setattr(st.session_state, 'page', 'home'))
        st.sidebar.button("üé® –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", on_click=lambda: setattr(st.session_state, 'page', 'directions'))
        st.sidebar.button("üë¶ –£—á–µ–Ω–∏–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã", on_click=lambda: setattr(st.session_state, 'page', 'students'))
        st.sidebar.button("üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", on_click=lambda: setattr(st.session_state, 'page', 'teachers'))
        st.sidebar.button("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è", on_click=lambda: setattr(st.session_state, 'page', 'schedule'))
        st.sidebar.button("üõçÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–∫—É–ø–∫–∏", on_click=lambda: setattr(st.session_state, 'page', 'materials'))
        st.sidebar.button("üìå –ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞", on_click=lambda: setattr(st.session_state, 'page', 'kanban'))
        st.sidebar.button("üñºÔ∏è –ú–µ–¥–∏–∞-–≥–∞–ª–µ—Ä–µ—è", on_click=lambda: setattr(st.session_state, 'page', 'media_gallery'))
        st.sidebar.button("üì§ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", on_click=lambda: setattr(st.session_state, 'page', 'bulk_upload'))
        st.sidebar.button("üëã –ü–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å–µ–ø—à–µ–Ω–∞", on_click=lambda: setattr(st.session_state, 'page', 'reception_helper'))
        
        st.sidebar.markdown("---")
        st.sidebar.button("üìä –û—Ç—á–µ—Ç –ø–æ –æ–ø–ª–∞—Ç–∞–º", on_click=lambda: setattr(st.session_state, 'page', 'payments_report'))
        st.sidebar.button("üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫—É–ø–∫–∞–º", on_click=lambda: setattr(st.session_state, 'page', 'materials_report'))
        
    elif st.session_state.role == 'teacher':
        st.sidebar.button("üè† –ì–ª–∞–≤–Ω–∞—è", on_click=lambda: setattr(st.session_state, 'page', 'home'))
        st.sidebar.button("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è", on_click=lambda: setattr(st.session_state, 'page', 'schedule'))
        st.sidebar.button("üë¶ –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏", on_click=lambda: setattr(st.session_state, 'page', 'students'))
        st.sidebar.button("üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏", on_click=lambda: setattr(st.session_state, 'page', 'kanban'))
    
    elif st.session_state.role == 'reception':
        st.sidebar.button("üè† –ì–ª–∞–≤–Ω–∞—è", on_click=lambda: setattr(st.session_state, 'page', 'home'))
        st.sidebar.button("üëã –ü–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å–µ–ø—à–µ–Ω–∞", on_click=lambda: setattr(st.session_state, 'page', 'reception_helper'))
        st.sidebar.button("üë¶ –£—á–µ–Ω–∏–∫–∏", on_click=lambda: setattr(st.session_state, 'page', 'students'))
        st.sidebar.button("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", on_click=lambda: setattr(st.session_state, 'page', 'schedule'))
    
    st.sidebar.markdown("---")
    st.sidebar.text(f"üë§ {st.session_state.username} ({st.session_state.role})")
    st.sidebar.button("üö™ –í—ã–π—Ç–∏", on_click=logout)
    
    # Clear data confirmation (admin only)
    if st.session_state.role == 'admin':
        if st.sidebar.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"):
            st.session_state.show_clear_confirm = True
        
        if st.session_state.show_clear_confirm:
            st.sidebar.warning("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! –í—ã —É–≤–µ—Ä–µ–Ω—ã?")
            col1, col2 = st.sidebar.columns(2)
            if col1.button("‚úÖ –î–∞"):
                initial_data = {
                    'directions': [],
                    'students': [],
                    'teachers': [],
                    'parents': [],
                    'payments': [],
                    'schedule': [],
                    'materials': [],
                    'kanban_tasks': {'ToDo': [], 'InProgress': [], 'Done': []},
                    'attendance': {},
                    'settings': {'trial_cost': 500, 'single_cost_multiplier': 1.5}
                }
                save_data(initial_data)
                st.session_state.data = load_data()
                st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
                st.session_state.show_clear_confirm = False
                st.rerun()
            if col2.button("‚ùå –ù–µ—Ç"):
                st.session_state.show_clear_confirm = False
                st.rerun()

    # --- Page Routing ---
    if st.session_state.page == 'home':
        show_home_page()
    elif st.session_state.page == 'directions':
        show_directions_page()
    elif st.session_state.page == 'students':
        show_students_page()
    elif st.session_state.page == 'teachers':
        show_teachers_page()
    elif st.session_state.page == 'schedule':
        show_schedule_page()
    elif st.session_state.page == 'materials':
        show_materials_page()
    elif st.session_state.page == 'kanban':
        show_kanban_board()
    elif st.session_state.page == 'media_gallery':
        show_media_gallery_page()
    elif st.session_state.page == 'bulk_upload':
        show_bulk_upload_page()
    elif st.session_state.page == 'payments_report':
        show_payments_report()
    elif st.session_state.page == 'materials_report':
        show_materials_report()
    elif st.session_state.page == 'reception_helper':
        show_reception_helper()
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞.")